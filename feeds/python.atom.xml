<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eleven.I386's Blog</title><link href="http://eleveni386.7axu.com/" rel="alternate"></link><link href="http://eleveni386.7axu.com/feeds/python.atom.xml" rel="self"></link><id>http://eleveni386.7axu.com/</id><updated>2013-09-01T00:00:00+08:00</updated><entry><title>采用pelican静态blog</title><link href="http://eleveni386.7axu.com/posts/2013/09/01/cai-yong-pelicanjing-tai-blog/" rel="alternate"></link><updated>2013-09-01T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2013-09-01:posts/2013/09/01/cai-yong-pelicanjing-tai-blog/</id><summary type="html">&lt;h2&gt;引子&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;因为我们的gtalk群组机器人需要更改Mysql为Mongo, 正好我也有想法使用静态博客程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在研究了几天&lt;code&gt;pelican&lt;/code&gt;之后, 今天就开始动手搬家了.. 唉,只是可惜了我哪些google收录的说 :-(&lt;/p&gt;
&lt;p&gt;最终效果如您所见.. 如何您是我和&lt;a href="(http://www.linuxzen.com/)"&gt;cold&lt;/a&gt;的熟人,那么别惊讶为何我的blog和他的那么相似.&lt;/p&gt;
&lt;p&gt;介个要归结于,&lt;code&gt;pelican&lt;/code&gt;有限的主题,和自己不擅长css的原因, 在众多主题中来回选择,
不断尝试,最终介个入围了...&lt;/p&gt;
&lt;p&gt;使用中的主题&lt;a href="(https://github.com/getpelican/pelican-themes/tree/master/tuxlite_tbs)"&gt;tuxlite_tbs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前已经可以正常访问, 不过还有一个问题存在, 本地与vps之间同步的问题, 本来在vps
上建立了一个git的仓库, 但是由于git极度不熟练的缘故,导致我push的文件,始终无法在
vps找到,更不要说设置nginx的root路径了, 于是,目前使用scp方式更新文件.... 表喷我傻... :-(&lt;/p&gt;
&lt;p&gt;经过这么几分钟的观察,感觉还算是满意的..&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category></entry><entry><title>CLI简易密码管理工具</title><link href="http://eleveni386.7axu.com/posts/2013/08/30/clijian-yi-mi-ma-guan-li-gong-ju/" rel="alternate"></link><updated>2013-08-30T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2013-08-30:posts/2013/08/30/clijian-yi-mi-ma-guan-li-gong-ju/</id><summary type="html">&lt;p&gt;最近用上了&lt;strong&gt;tmux&lt;/strong&gt;, 抛弃了&lt;strong&gt;SecureCRT&lt;/strong&gt;,  但是没有便利的密码输入功能. 每次登录上服务器之后我都要将鼠标移动到状态栏 点击&lt;strong&gt;KeepassX&lt;/strong&gt;,然后在&lt;strong&gt;Keepassx&lt;/strong&gt;里面找到我需要的密码,然后在贴在&lt;strong&gt;tmux&lt;/strong&gt;上..完成一次密码输入过程.  &lt;/p&gt;
&lt;p&gt;这种过程与使用&lt;strong&gt;tmux&lt;/strong&gt;给我带来的便利(快捷键的存在,让我可以完全抛弃鼠标,事实用了&lt;strong&gt;tmux&lt;/strong&gt;我就没有使用鼠标了.) 格格不入.. 感觉就像开着一辆跑车.结果却时不时的要停下来加油.. 这种感觉十分难受..(不打点会死星人)  &lt;/p&gt;
&lt;p&gt;于是就想到一个办法, 利用&lt;strong&gt;tmux&lt;/strong&gt;的缓冲区, 来完成挑选密码的过程.  &lt;/p&gt;
&lt;p&gt;首先:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tmux&lt;/strong&gt;拥有自己的黏贴板,在&lt;strong&gt;tmux&lt;/strong&gt;中复制的时候,可以通过&lt;code&gt;tmux show-buffer&lt;/code&gt;找到复制的内容;&lt;/p&gt;
&lt;p&gt;然后:  &lt;/p&gt;
&lt;p&gt;使用一个工具,截获&lt;strong&gt;tmux&lt;/strong&gt;的缓冲,得到里面的ip, 根据ip地址去数据内寻找相应的密码;&lt;/p&gt;
&lt;p&gt;带着这个想法, 在群里询问了一下群友, 是否有命令行版本的密码管理工具, 群友推荐一个叫做&lt;a href="http://zx2c4.com/projects/password-store/"&gt;Pass&lt;/a&gt;的东西,经过试用,感觉不适合这个地方, 因为&lt;strong&gt;Pass&lt;/strong&gt;是交互式的CLI工具, 无法于tmux结合, 难到木有办法了? 那就自己动手吧&lt;/p&gt;
&lt;p&gt;经过一夜努力, 出来了这货&lt;a href="https://github.com/eleveni386/clipm"&gt;clipm.py&lt;/a&gt; 使用方法参考github的README&lt;/p&gt;</summary><category term="tmux"></category><category term="运维"></category></entry><entry><title>python带cookies访问</title><link href="http://eleveni386.7axu.com/posts/2013/06/03/pythondai-cookiesfang-wen/" rel="alternate"></link><updated>2013-06-03T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2013-06-03:posts/2013/06/03/pythondai-cookiesfang-wen/</id><summary type="html">&lt;p&gt;本人是运维一枚,使用次数最多的就是Vandyke的&lt;a href="https://secure.vandyke.com/cgi-bin/download_form.php?pid=securecrt_ubuntu1264_deb_71&amp;amp;st=4&amp;amp;"&gt;SecureCRT&lt;/a&gt;.
在win系统下面有各种大牛
破解的scrt版本,但是在咱debian下面 就只能使用官方正版的,但是因为scrt是收费的,
而且还死贵死贵($99), 咱这种中下农,搞不起这货, 只能使用它的免费30天,时间一到,
要么就是删除它的认证文件,要么就是卸载原有的,然后重新安装, 非常麻烦…&lt;/p&gt;
&lt;p&gt;于是就想着能不能通过cron自动下载安装, 于是就有了第一版本的&lt;a href="(https://code.google.com/p/sharepythoncode/downloads/detail?name=Vandyke_update.py&amp;amp;can=2&amp;amp;q=)"&gt;Vandyke_update.py&lt;/a&gt; 脚本,
通过抓包分析到Vandyke 的post数据,通过urllib2提交,并下载, 跑了一年都挺好的, &lt;/p&gt;
&lt;p&gt;但是今天有同事(ubuntu)使用我的脚本自动更新的时候,发现无效了,返回信息提示”Bad product id”,
然后通过chrome的开发者工具跟踪了一下,发现post数据的字段改变了. 不再提供”sid”这个字段
(每次Vandyke用户登录之后都会在cookie中分配这个这个id,是不变的),只好重新分析它post内容,&lt;/p&gt;
&lt;p&gt;看见它post内容变的非常简单,只有两个字段:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pid(product id)&lt;/li&gt;
&lt;li&gt;status&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尝试了几次,发现它现在所有认证信息都是从cookies里面获取的, 咱就只能模拟登录,
保留cookies,带着cookies访问它的下载页面&lt;/p&gt;
&lt;p&gt;模拟登录,及带着cookies访问其他页面代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;urllib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cookielib&lt;/span&gt;

&lt;span class="n"&gt;cj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cookielib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CookieJar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;opener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPCookieProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;securecrt_ubuntu1264_deb_71&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                          &lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;eleven.i386@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                          &lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*******&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                          &lt;span class="s"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;post2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;securecrt_ubuntu1264_deb_71&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                          &lt;span class="s"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://secure.vandyke.com/cgi-bin/account_verify.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;req2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://secure.vandyke.com/cgi-bin/download.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;post2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一段测试用的代码,请无视它那掉节操的变量名称,
实在不想花费脑细胞在测试代码的变量名称上(虽然正式代码的变量名称一样无节操)&lt;/p&gt;
&lt;h3&gt;参数说明&lt;/h3&gt;
&lt;p&gt;第一个post, 用于做登录. 提交用户名和密码,&lt;/p&gt;
&lt;p&gt;第二个post,用于发送下载请求,提交请求资源的id,和status(这玩意一直不知道干嘛的),
请求资源的文件名称,在第一个post的respose header的Content-Disposition字段里面,&lt;/p&gt;</summary><category term="python"></category><category term="桌面"></category><category term="运维"></category></entry><entry><title>多线程ssh分发脚本</title><link href="http://eleveni386.7axu.com/posts/2012/09/08/duo-xian-cheng-sshfen-fa-jiao-ben/" rel="alternate"></link><updated>2012-09-08T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2012-09-08:posts/2012/09/08/duo-xian-cheng-sshfen-fa-jiao-ben/</id><summary type="html">&lt;p&gt;说到自动化运维工具, 那是一个满天飞. 我也首推&lt;code&gt;puppet&lt;/code&gt;,无疑灰常的强大.但是强大
是强大. 就是有点依赖部署,如果部署不好,后期使用会很难受,各种不顺手. 现在我就是这样,
使用puppet是一个前辈部署的.我们puppet应用也灰常简单.就是做服务器应用平台初始化用,&lt;/p&gt;
&lt;p&gt;很多简单的操作.比如10几台需要更新杀毒软件,这个时候使用puppet,又需要重新建立配
置文件,(ps:都是前期没有做好规划).这样一个简单的工作就变的复杂话了,如果不使用自动
运维工具,那么… 恩. 你就将新的病毒库一个一个scp到各个主机上. 然后一个一个登录主
机,执行一遍&lt;code&gt;update&lt;/code&gt; 命令吧..&lt;/p&gt;
&lt;p&gt;这个时候如果有一个自动ssh登录工具, 并且具备&lt;code&gt;scp&lt;/code&gt;功能的工具就好了. 
我记得以前有一个叫做&lt;strong&gt;abs&lt;/strong&gt;的shell脚本. 利用&lt;strong&gt;ssh+sshpass+except&lt;/strong&gt; 做的自动登录ssh,
并且避免一个一个输入密码的烦恼, 这也是一个很不错的小工具, 不过..google了半天 
都没有线索.. 唉. 找不到这个工具..(有听过小道消息说这是TX内部的), 恰好,我之前使
用过&lt;strong&gt;abs&lt;/strong&gt;,知道这个小工具的功能. 于是… 就仿造了一个出来, 恩.. 名字呢. 就叫做&lt;strong&gt;pbs&lt;/strong&gt;.
是用&lt;strong&gt;python+paramiko&lt;/strong&gt;写的,总共300行不到的代码,功能主要是ssh登录,sftp上传,下载,
比abs好一点的就是,它是多线程的.&lt;/p&gt;
&lt;p&gt;目前,&lt;code&gt;pbs.py&lt;/code&gt; 已经服务了50+机器.是结合我这个前期部署糟糕的&lt;code&gt;puppet&lt;/code&gt;使用的.
今天做了一个效率对比(单线程的scp和多线程的pbs.py),&lt;/p&gt;
&lt;p&gt;实验环境:&lt;/p&gt;
&lt;p&gt;4台Debian5 机器 位于A机房(电信)&lt;/p&gt;
&lt;p&gt;1台Debian5 机器 位于 B机房 (双线) &lt;code&gt;pbs&lt;/code&gt;所在主机&lt;/p&gt;
&lt;p&gt;对比如下&lt;/p&gt;
&lt;p&gt;上传文件 clamav.tar.gz 79MB&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;scp                                            pbs

real 12m24.490s                           real 5m11.375s
user 0m28.462s                            user 0m30.842s
sys 0m1.924s                              sys 0m2.428s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上传文件 lighttpd.tar.gz 1.9MB&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;scp                                           pbs

real 0m44.138s                            real 0m10.583s
user 0m1.564s                             user 0m1.616s
sys 0m0.080s                              sys 0m0.116s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此对比效率 一见高下, 当然不是说&lt;strong&gt;scp&lt;/strong&gt;不好, 毕竟&lt;strong&gt;scp&lt;/strong&gt;经历了千锤百打.久经
考验,从代码效率.人气来说都毋庸质疑, 可惜的是&lt;strong&gt;scp&lt;/strong&gt;不是多线程工具.&lt;strong&gt;pbs&lt;/strong&gt;占据了多线程而已.&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;scp+sshpass+except&lt;/code&gt;, shell并发子进程也是可以高效的文件分发工作.不过… 
子进程跟线程之间的资源开销 就无法比较了..&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/sharepythoncode/"&gt;pbs.py&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="运维"></category></entry></feed>