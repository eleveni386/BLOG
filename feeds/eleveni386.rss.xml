<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Eleven.I386's Blog</title><link>http://eleveni386.7axu.com/</link><description></description><atom:link href="http://eleveni386.7axu.com/feeds/eleveni386.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 21 Dec 2015 00:00:00 +0800</lastBuildDate><item><title>flvcd广告绕过</title><link>http://eleveni386.7axu.com/posts/2015/12/21/flvcdyan-gao-rao-guo/</link><description>&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;原本是想寻找让mplayer播放youku视频的. 但是想了好多种方法. 都不知道如何让mplayer接管flash来播放视频. 最终在研究这个问题的过程中.发现了flvcd居然出现了,广告!!!, 虽然我能理解flvcd的做法.毕竟他们破解了人家视频网站的加密url, 让他们损失了不少的广告流量. 但是flvcd好歹提供一种更加友好(自动化)的广告播放方式吖. 你用flash是算什么吖!  &lt;/p&gt;
&lt;h1&gt;flvcd广告&lt;/h1&gt;
&lt;p&gt;flvcd目前限制了部分浏览器访问(或许是操作系统.比如我Linux系统访问时. 就会出现apache的欢迎页), 通过修改浏览器UA即可. 
  然后在点击Go之后, 跳转到本来应该是视频真实地址列表页. 但是这里出现了原视频的广告列表. 要求用户必须浏览其中任意一个广告,才能出现真实地址列表.&lt;/p&gt;
&lt;p&gt;点击其中一个广告之后. 出现flash的播放器. 不过好歹flvcd还是比较良心. 只需要等待3秒. 就可以选择跳过广告了. 虽然良心. 但是我是需要自动化获取真实地址的. 于是我被这个广告列表拦截了. 通过多次尝试. 发现flvcd在广告播放完毕之后, 会在cookie中增加2个新键&lt;code&gt;go&lt;/code&gt;, &lt;code&gt;avdGggggtt&lt;/code&gt;,  其中多次观察.&lt;code&gt;go&lt;/code&gt;参数是一个加密值, &lt;code&gt;avdGggggtt&lt;/code&gt;是当前的时间戳, 有了这个发现.那么可以认为. 我如果要提交一个视频页地址给flvcd帮我解析. 那么势必我需要带上这两个参数. 不然就会出现广告页. 那么问题来了 &lt;code&gt;go&lt;/code&gt; 参数如何得到. 他是怎么计算出来的 &lt;/p&gt;
&lt;h1&gt;破解之路&lt;/h1&gt;
&lt;p&gt;首先想到的就是&lt;em&gt;swf&lt;/em&gt;了, 他的广告播放器. 因为每次都是广告结束之后, 才会写入cookie. 于是我用wget下载了他的swf播放器.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wget 'http://www.flvcd.com/swf/avd.swf?v=20151126' --user-agent='Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36' -O avd.swf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;反编译出AS脚本. 跟踪&lt;strong&gt;cookie&lt;/strong&gt;的传递以及上下文找到了&lt;strong&gt;playOverCallback&lt;/strong&gt;属性.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text.htmlText = "&amp;lt;font color='#0a4055'&amp;gt;1&amp;lt;/font&amp;gt;秒后可跳过广告";
  text.y = 8;
  this.skipLayer.addChild(text);
  this.skipLayer.buttonMode = true;
  this.skipLayer.addEventListener(MouseEvent.CLICK, function (_arg1:MouseEvent):void{
    if (netStream.time &amp;lt; maxSkipBegin){
        return;
    };
    ExternalInterface.call(playOverCallback);
  });
  this.skipLayer.x = ((this.mediaLayer.width - this.skipLayer.width) - 60);
  this.skipLayer.y = ((this.mediaLayer.height - this.skipLayer.height) - 100);
  this.skipLayer.visible = false;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;发现这里调用了js的&lt;strong&gt;playOverCallback&lt;/strong&gt;变量, 跟踪到flvcd页面, 搜索&lt;strong&gt;playOverCallback&lt;/strong&gt;, 找到这么一串东西&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eval(function(p,a,c,k,e,r){e=function(c){return(c&amp;lt;a?'':e(parseInt(c/a)))+((c=c%a)&amp;gt;35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('2 E=Q;2 D=13;3 R(a,b){$("#f").k({m:X,n:K});r.J(\'f\');D={1b:[{18:a,17:b}],10:"N"};y()}3 y(){I(!E){4.c(y,W);l}2 a=O("F");V{a.T(D);a.H()}S(e){q(\'2 g = s(u, d);2 1 = h i();1.x(1.j()+z*5);6.9="C="+g+";8="+1.7();6.9="B="+d+";8="+1.7();4.c(3(){4.A.p();}, o);\');l}}3 N(){r.U();$("#f").k({G:"M",m:0,n:0});q(\'2 g = s(u, d);2 1 = h i();1.x(1.j()+z*5);6.9="C="+g+";8="+1.7();6.9="B="+d+";8="+1.7();4.c(3(){4.A.p();}, o);\')}3 O(a){l Y.Z(a)}2 w=0;3 11(){$("#F").12();$("#P").k({G:"M"});$("#f").k({m:14,n:K,15:"16"});r.J(\'f\');w=h i().j()/5;4.c(v,5)}3 v(){2 e=h i().j()/5;2 t=19.1a(e-w);I(t&amp;gt;L){q(\'2 g = s(u, d);2 1 = h i();1.x(1.j()+z*5);6.9="C="+g+";8="+1.7();6.9="B="+d+";8="+1.7();4.c(3(){4.A.p();}, o);\');l}$("#1c").1d((L-t)+"秒后开始解析");4.c(v,5)}H=1e=3(){1f("请关闭1g后再解析！")};',62,79,'|date|var|function|window|1000|document|toGMTString|expires|cookie|||setTimeout|XSSUhH||unLEPZ||new|Date|getTime|css|return|width|height|500|reload|eval|TSPopup|createSc||ygOoKv|doErrorPlay|errorStart|setTime|OPWSAY|300|location|avdGggggtt|go|config|avdOk|MnsWrL|display|doPlay|if|showDiv|540|20|block|ZHKxVp|thisMovie|nLXuim|false|avdPlay|catch|setup|closeDiv|try|100|960|swfobject|getObjectById|playOverCallback|dIXpcN|remove|null|700|overflowY|auto|clickthrough|url|Math|floor|ads|adtime|html|gogogo|alert|ADSafe'.split('|'),0,{}));ygOoKv='604f4848335c07ef64d76dc9df098b4a';XSSUhH=1450708902276;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;好吧. 使用了js混淆和压缩. 解开它 在看看是个什么鬼&lt;/p&gt;
&lt;p&gt;```
  function avdPlay(a, b) {
  $("#unLEPZ").css({
        width: 960,
                height: 540&lt;/p&gt;
&lt;p&gt;});
    TSPopup.showDiv('unLEPZ');
    config = {
    ads: [{
                url: a,
                            clickthrough: b&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;}],
        playOverCallback: &amp;quot;ZHKxVp&amp;quot;

};
    OPWSAY()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
  function OPWSAY() {
  if (!avdOk) {
        window.setTimeout(OPWSAY, 100);
                return&lt;/p&gt;
&lt;p&gt;}
    var a = thisMovie("MnsWrL");
    try {
            a.setup(config);
                    a.doPlay()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;var g = createSc(ygOoKv, XSSUhH);var date = new Date();date.setTime(date.getTime()+300*1000);document.cookie=&amp;quot;go=&amp;quot;+g+&amp;quot;;expires=&amp;quot;+date.toGMTString();document.cookie=&amp;quot;avdGggggtt=&amp;quot;+XSSUhH+&amp;quot;;expires=&amp;quot;+date.toGMTString();window.setTimeout(function(){window.location.reload();}, 500);&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                &lt;span class="k"&gt;return&lt;/span&gt;

                &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
  ```&lt;/p&gt;
&lt;p&gt;看到这里, 就找到了 &lt;code&gt;go&lt;/code&gt;参数的加密算法在&lt;strong&gt;createSc&lt;/strong&gt;函数中, 于是我用这个作为关键字在flvcd的页面上搜索. 又找到了一段混淆和加密过的js. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;eval(function(p,a,c,k,e,r){e=function(c){return c.toString(a)};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('h n(d,c){c=j.k(c/m);4="";i(7 b=0;b&amp;lt;d.l;b++){7 a=d.6(b)^"g".6(b)^c,a=a%3,a=5&amp;gt;a?1.2(5+a%9):5&amp;lt;=a&amp;amp;&amp;amp;8&amp;gt;=a?1.2(a):8&amp;lt;a&amp;amp;&amp;amp;e&amp;gt;a?"9":e&amp;lt;=a&amp;amp;&amp;amp;f&amp;gt;=a?1.2(a):f&amp;lt;a&amp;amp;&amp;amp;o&amp;gt;a?"p":3&amp;lt;=a&amp;amp;&amp;amp;3&amp;gt;=a?1.2(a):"q";4+=a}r 4};',28,28,'|String|fromCharCode|122|ret|48|charCodeAt|var|57||||||65|90|26499035657058937199857879755120|function|for|Math|floor|length|6E5|createSc|97|Z|z|return'.split('|'),0,{}))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;照样解开, 得到我们可爱的&lt;strong&gt;createSc&lt;/strong&gt;函数, 一个非主流的凯撒密码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;function createSc(a, t) {
        var b = "26499035657058937199857879755120";
        t = Math.floor(t / (600 * 1000));
        ret = "";
        for (var i = 0; i &amp;lt; a.length; i++) {
            var j = a.charCodeAt(i) ^ b.charCodeAt(i) ^ t;
            j = j % 'z'.charCodeAt(0);
            var c;
            if (j &amp;lt; '0'.charCodeAt(0)) {
                c = String.fromCharCode('0'.charCodeAt(0) + j % 9)
            } else if (j &amp;gt;= '0'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt;= '9'.charCodeAt(0)) {
                c = String.fromCharCode(j)
            } else if (j &amp;gt; '9'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt; 'A'.charCodeAt(0)) {
                c = '9'
            } else if (j &amp;gt;= 'A'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt;= 'Z'.charCodeAt(0)) {
                c = String.fromCharCode(j)
            } else if (j &amp;gt; 'Z'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt; 'a'.charCodeAt(0)) {
                c = 'Z'
            } else if (j &amp;gt;= 'z'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt;= 'z'.charCodeAt(0)) {
                c = String.fromCharCode(j)
            } else {
                c = 'z'
            }
            ret += c
        }
        return ret
    }&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;结尾&lt;/h1&gt;
&lt;p&gt;到此就已经结束了. cookie中的&lt;strong&gt;go&lt;/strong&gt;参数我们已经可以计算出来. 那么绕过他的广告限制. 我们又可以愉快的下载视频了.( :&amp;lt; 真不道德)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Mon, 21 Dec 2015 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2015-12-21:posts/2015/12/21/flvcdyan-gao-rao-guo/</guid><category>flvcd</category><category>youku</category><category>视频</category><category>破解</category></item><item><title>python版rm命令</title><link>http://eleveni386.7axu.com/posts/2014/11/21/pythonban-rmming-ling/</link><description>&lt;h1&gt;安全的linux rm 命令&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;-- python版rm命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;众所周知 linux 下 大杀器之一 rm 是多么恐怖的东西存在&lt;/p&gt;
&lt;p&gt;众多系统管理员 对此命令是又爱 又恨,  基于本人也是一枚系统管理员, 写下这个小 工具
方便自己 随心所欲的使用大杀器&lt;/p&gt;
&lt;p&gt;麻麻再也不用担心 我使用rm了&lt;/p&gt;
&lt;h2&gt;特性&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1.  删除日志记录
2. 安全目录
3. 垃圾箱机制
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;SAFE_DIR&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;...]]&lt;/span&gt;

&lt;span class="err"&gt;用于替换系统的&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="err"&gt;命令&lt;/span&gt;
&lt;span class="err"&gt;自带回收站&lt;/span&gt;
&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^/$&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^/home/?$&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;增加&lt;/span&gt;&lt;span class="sr"&gt;/ 和 /&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt; &lt;span class="err"&gt;目录不可删除&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;显示删除日志&lt;/span&gt;


&lt;span class="n"&gt;positional&lt;/span&gt; &lt;span class="k"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;                  &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="k"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;            &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;recursive&lt;/span&gt;       &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;directories&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="n"&gt;recursively&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;           &lt;span class="n"&gt;ignore&lt;/span&gt; &lt;span class="n"&gt;nonexistent&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
     &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;                 &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;SAFE_DIR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;add_safe_dirs&lt;/span&gt; &lt;span class="n"&gt;SAFE_DIR&lt;/span&gt;
                         &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;safe&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;默认安全目录&lt;/h2&gt;
&lt;p&gt;[Safe_dirs]&lt;/p&gt;
&lt;p&gt;safe_dirs = ['^/$', '^/home/?$', '^/usr/?$', '^/var/?$']&lt;/p&gt;
&lt;p&gt;可通过 &lt;code&gt;-a&lt;/code&gt;参数 添加 新的 安全目录 (&lt;strong&gt;每次添加一个目录&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;或 直接 在 &lt;code&gt;~/.Recycle/.Recycle.conf&lt;/code&gt;中添加&lt;/p&gt;
&lt;h2&gt;垃圾箱位置&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;~/.Recycle/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该目录下 存在两个隐藏文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.delete&lt;/code&gt;, &lt;code&gt;.Recycle.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;delete 是删除日志
Recycle.conf 是安全目录配置文件&lt;/p&gt;
&lt;h2&gt;获取&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;轻轻戳一下右上角的 Fork me on GitHub 哦
https://github.com/eleveni386/remove&lt;/p&gt;
&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Fri, 21 Nov 2014 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2014-11-21:posts/2014/11/21/pythonban-rmming-ling/</guid><category>python</category><category>Linux</category><category>命令</category><category>工具</category></item><item><title>Empathy快速关闭聊天窗口</title><link>http://eleveni386.7axu.com/posts/2014/04/10/empathykuai-su-guan-bi-liao-tian-chuang-kou/</link><description>&lt;blockquote&gt;
&lt;p&gt;只所以使用Empathy,而不是Pidgin, 是因为厌倦了单调的聊天窗口主题, 在Pidgin安装了新主题,每次
关闭聊天窗口,再次打开窗口时, 主题不存在了.但是Pidgin的插件真的很多, 用着很顺手,比如Esc快速
关闭聊天窗口.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;关闭会话窗口&lt;/h2&gt;
&lt;p&gt;Empathy 在默认情况下, 要关闭一个聊天会话 可以使用&lt;code&gt;Ctrl+W&lt;/code&gt;, 也可以使用鼠标点击&lt;code&gt;x&lt;/code&gt;, 但是这些&lt;/p&gt;
&lt;p&gt;操作方式都很变扭, 用习惯了Pidgin的&lt;code&gt;Esc&lt;/code&gt;,很难适应&lt;code&gt;Ctrl+W&lt;/code&gt;方式.&lt;/p&gt;
&lt;h2&gt;修改&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;被修改的文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/share/empathy/empathy-chat-window.ui
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过搜索 &lt;strong&gt;gtk-close&lt;/strong&gt; 找到一下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;55           &lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GtkAction&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;menu_conv_close&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;                        
56             &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stock_id&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;gtk-close&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;                       
57             &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;menu_conv_close&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;                     
58           &lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;                                                              
59           &lt;span class="c"&gt;&amp;lt;!--&amp;lt;accelerator key=&amp;quot;W&amp;quot; modifiers=&amp;quot;GDK_CONTROL_MASK&amp;quot;/&amp;gt;--&amp;gt;&lt;/span&gt;             
60           &lt;span class="nt"&gt;&amp;lt;accelerator&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Escape&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;                                            
61         &lt;span class="nt"&gt;&amp;lt;/child&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注释掉 59行的内容,增加60行的内容进去&lt;/p&gt;
&lt;p&gt;保存,退出 ,重启Empathy&lt;/p&gt;
&lt;h2&gt;Hotkeys&lt;/h2&gt;
&lt;p&gt;使用Pidgin的大多数都知道这么一个插件, 能为Pidgin提供快捷键方式呼出聊天窗口, 类似企鹅的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+Alt+z&lt;/code&gt; 组合键&lt;/p&gt;
&lt;p&gt;恩, 对于我这一代的Linuxer而言, 都是从Windows 过来的, 自然也摆脱不了企鹅对我的影响, 在快捷键&lt;/p&gt;
&lt;p&gt;使用习惯上的, 于是我的Pidgin 快捷键也是&lt;code&gt;Ctrl+Alt+z&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;但是Empathy 是没有hotkeys插件的, 每次来了新消息 都要移动鼠标到Tray区域,很烦.... 于是,在&lt;/p&gt;
&lt;p&gt;群友&lt;a href="http://lilydjwg.is-programmer.com/"&gt;百合仙子&lt;/a&gt;的提示下, 自己写脚本来呼出聊天窗口.&lt;/p&gt;
&lt;h2&gt;快速唤出聊天窗口&lt;/h2&gt;
&lt;p&gt;脚本原理很简单. 根据Empathy的屏幕坐标, 模拟鼠标点击, 来唤出聊天窗口, 能玩Empathy的都是Linuxer了,&lt;/p&gt;
&lt;p&gt;咱的代码就不拿出来献丑了. 本来这个原理也懒得写出来的. 不过还是写出来,也能占个关键字嘛&lt;/p&gt;
&lt;p&gt;^.^ &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Thu, 10 Apr 2014 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2014-04-10:posts/2014/04/10/empathykuai-su-guan-bi-liao-tian-chuang-kou/</guid><category>聊天</category><category>Empathy</category></item><item><title>squid正向代理</title><link>http://eleveni386.7axu.com/posts/2014/03/07/squidzheng-xiang-dai-li/</link><description>&lt;h2&gt;匿名代理&lt;/h2&gt;
&lt;p&gt;squid 要做到匿名代理 只需要添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;header_access Via deny all 
header_access  X-Forwarded-For deny all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即可&lt;/p&gt;
&lt;h2&gt;代理验证&lt;/h2&gt;
&lt;p&gt;谁都不想自己的代理服务器被他人随意拿来使用.. 于是 我们就需要给代理服务器加上密码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auth_param basic program /data/home/eleven/squid2.7/bin/ncsa_auth
auth_param basic children 1
auth_param basic realm &amp;quot;Welcome to eleven&amp;#39;s proxy server&amp;quot;
auth_param basic credentialsttl 12 hours
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的&lt;strong&gt;ncsa_auth&lt;/strong&gt; 是自己写的shell脚本, 我的squid版本是2.7, 没有自带ncsa_auth程序&lt;/p&gt;
&lt;h2&gt;一个简单的代理验证脚本&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;while true;&lt;/span&gt;
&lt;span class="x"&gt;do&lt;/span&gt;
&lt;span class="x"&gt;    read line&lt;/span&gt;
&lt;span class="x"&gt;    username=`echo &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="x"&gt; | awk &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;print &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;1}&amp;#39;`;&lt;/span&gt;
&lt;span class="x"&gt;    password=`echo &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="x"&gt; | awk &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;print &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;2}&amp;#39;`;&lt;/span&gt;

&lt;span class="x"&gt;    if [ &amp;quot;x&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;xeleven&amp;quot; ]&lt;/span&gt;
&lt;span class="x"&gt;    then&lt;/span&gt;
&lt;span class="x"&gt;        if [ &amp;quot;x&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;x*****&amp;quot; ]&lt;/span&gt;
&lt;span class="x"&gt;        then&lt;/span&gt;
&lt;span class="x"&gt;            echo OK;&lt;/span&gt;
&lt;span class="x"&gt;        else&lt;/span&gt;
&lt;span class="x"&gt;            echo Err;&lt;/span&gt;
&lt;span class="x"&gt;        fi  &lt;/span&gt;
&lt;span class="x"&gt;    else&lt;/span&gt;
&lt;span class="x"&gt;        echo Err;&lt;/span&gt;
&lt;span class="x"&gt;    fi  &lt;/span&gt;
&lt;span class="x"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个脚本有点类似之前的&lt;a href="http://eleveni386.7axu.com/posts/2013/10/13/squid-url-tiao-zhuan/"&gt;&lt;strong&gt;squid url跳转&lt;/strong&gt;&lt;/a&gt;
使用的脚本. 都是脚本从squid处接收需要处理的信息, 脚本处理完毕之后返回给squid结果&lt;/p&gt;
&lt;h2&gt;squid正向代理, 搭建 http 代理服务器&lt;/h2&gt;
&lt;p&gt;以下是一份完整的squid正向代理的配置文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auth_param basic program /data/home/eleven/squid2.7/bin/ncsa_auth
auth_param basic children 1
auth_param basic realm &amp;quot;Welcome to eleven&amp;#39;s proxy server&amp;quot;
auth_param basic credentialsttl 12 hours
acl all src all 
acl squid_user proxy_auth REQUIRED
acl manager proto cache_object
acl localhost src 127.0.0.1/32
acl SSL_ports port 443 
acl Safe_ports port 80      # http
acl Safe_ports port 21      # ftp
acl Safe_ports port 443     # https
acl CONNECT method CONNECT
http_access allow manager localhost
http_access deny manager
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost
# 允许密码用户登录
http_access allow squid_user
# 拒绝其他所有请求
http_access deny all
# Squid的监听端口
http_port **** # 不准暴力猜解我的密码. 哼
# DNS 域名服务器配置
dns_nameservers 8.8.8.8
# 启动squid2.7的用户
cache_effective_user eleven
cache_effective_group eleven
# squid2.7访问日志; 调试时开启
#cache_access_log /var/log/squid/access.log
#cache_log /var/log/squid/cache.log
# squid2.7挂掉后，core文件位置
coredump_dir /data/home/eleven/squid2.7/
# 高匿
header_access Via deny all
header_access  X-Forwarded-For deny all
# 出现cgi-bin或者？的URL不予缓存
hierarchy_stoplist cgi-bin ? \.php
acl QUERY urlpath_regex -i cgi-bin [^html]\? \.asp \.php \.jsp \.cgi
acl download urlpath_regex -i \.avi$ \.rmvb$ \.rm$ \.ra$ \.ram$ \.mpe$ \.smi$
cache deny QUERY
cache deny download
# 磁盘缓存目录
cache_dir ufs /data/home/eleven/squid2.7/cdir 500 16 256
# 内存缓冲大小
cache_mem 2M
# 刷新缓存规则
refresh_pattern ^ftp:       1440    20% 10080
refresh_pattern -i (/cgi-bin/|\?) 0 0%  0
refresh_pattern .       0   20% 4320
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;加密本地至squid的请求&lt;/h2&gt;
&lt;p&gt;前面的文章里面讲解过了使用&lt;strong&gt;Stunnel&lt;/strong&gt;做加密解密, 本地使用&lt;strong&gt;socat&lt;/strong&gt;做数据转发, 采用
&lt;strong&gt;openssl&lt;/strong&gt; 加密本地http数据,&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eleveni386.7axu.com/posts/2013/05/17/jia-mi-ni-de-httpqing-qiu-chuan-qiang/"&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;结束&lt;/h2&gt;
&lt;p&gt;至此, 一个全新的支持https访问的 http代理就搭建成功了. 第一次访问会要求你输入帐号和密码
相信看过本人此前的文章 都知道我曾经使用了一个叫做&lt;strong&gt;kangle&lt;/strong&gt;的工具 搭建了一个http代理.
不知道从什么时候开始 &lt;strong&gt;kangle&lt;/strong&gt; 搭建的代理 无法访问https协议的 站点. 于是,才迫使我
转而使用squid. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Fri, 07 Mar 2014 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2014-03-07:posts/2014/03/07/squidzheng-xiang-dai-li/</guid><category>运维</category><category>Linux</category><category>squid</category><category>http代理</category><category>匿名代理</category></item><item><title>记一次ssh密钥登录失败</title><link>http://eleveni386.7axu.com/posts/2014/02/27/ji-yi-ci-sshmi-yao-deng-lu-shi-bai/</link><description>&lt;h2&gt;环境&lt;/h2&gt;
&lt;p&gt;我们的私钥是通过SecureCRT工具生成的. 在Debian5/6下面使用正常
有问题的主机是Debian7 系统, 客户端是Debian6 系统
Debian7 的ssh server版本是1.6 客户端的ssh client是1.5
使用的ssh协议均是2&lt;/p&gt;
&lt;h2&gt;现象&lt;/h2&gt;
&lt;p&gt;昨天我们一台Debian7主机, 无法通过私钥登录. 每次登录提示需要输入密码. 这是我们第一次使用Debian7的系统, 以往的主机都是Debian5/6的系统&lt;/p&gt;
&lt;p&gt;开启ssh的debug参数, 观看登录过程,发现如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;debug2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_type_from_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-----BEGIN&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;debug2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_type_from_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-----END&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;debug3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_read&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;whitespace&lt;/span&gt;
&lt;span class="n"&gt;debug3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_read&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;whitespace&lt;/span&gt;
&lt;span class="n"&gt;debug3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_read&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;whitespace&lt;/span&gt;
&lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;排查&lt;/h2&gt;
&lt;p&gt;一开始看到这样的信息, 我以为是私钥格式不正确. 因为网络上一直流传着SecureCRT和Putty之类的工具,产生的密钥和ssh-keygen产生的 格式上有区别
不过从我们以往的经验上来看(Debian5/6) , SecureCRT生成的可以正常使用, &lt;/p&gt;
&lt;p&gt;虽然有这样的疑问 不过还是重新生成了一份密钥, 继续登录, 还是提示一样的问题, 我最后在Debian7 上 使用ssh-keygen生成一份密钥, 还是提示一样的问题
我突然醒悟过来, ssh兼容ssh1的协议. 于是ssh在登录的时候 会协商使用什么样的协议, 上面的提示问题应该是密钥格式不符合ssh1, 所以本次问题应该不是出
在私钥格式不对的问题, &lt;/p&gt;
&lt;p&gt;于是我去对比 ssh-keygen 产生的密钥 和 SecureCRT产生的有啥不同. 结果我发现 私钥里面写着root
我去.. 我的私钥是给cache用户用的, 私钥里面怎么会有root呢? &lt;/p&gt;
&lt;p&gt;小心翼翼的瞄了一眼 我的shell 提示符, &lt;strong&gt;#&lt;/strong&gt; 果果的出现了.... &lt;/p&gt;
&lt;p&gt;好吧, 为了排查方便我切换到了root下, 我却不记得了. &lt;/p&gt;
&lt;p&gt;切换到cache用户下 再次执行ssh-keygen &lt;/p&gt;
&lt;p&gt;在使用ssh-keygen的时候 有一个提示引起了我的注意 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    open /home/cache/.ssh/id_rsa failed: Permission denied
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为什么会Permission denied ? &lt;/p&gt;
&lt;p&gt;果断查看家目录下的 .ssh 目录权限.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    drw-r--r-- 2 cache cache 4096 Feb 27 11:03 .ssh/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我去, 说好的&lt;strong&gt;x&lt;/strong&gt;权限呢? &lt;/p&gt;
&lt;p&gt;给.ssh加上&lt;strong&gt;x&lt;/strong&gt;权限之后, 再次登录. 果断成功了... &lt;/p&gt;
&lt;h2&gt;结束&lt;/h2&gt;
&lt;p&gt;事后想想, 应该是用户在登录的时候, ssh要对用户提交的私钥做验证, 但是却无法进入.ssh目录, 就当作用户的公钥不存在, 于是要求用户使用密码方式&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Thu, 27 Feb 2014 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2014-02-27:posts/2014/02/27/ji-yi-ci-sshmi-yao-deng-lu-shi-bai/</guid><category>ssh</category><category>运维</category><category>密钥</category><category>Linux</category></item><item><title>Squid Url 跳转</title><link>http://eleveni386.7axu.com/posts/2013/10/13/squid-url-tiao-zhuan/</link><description>&lt;h2&gt;需求&lt;/h2&gt;
&lt;p&gt;当Iphone/Ipad/Android 等访问 http://www.xxx.com 时跳转到 
http://www.xxx.com/mobile/xxx/mobile.html?ref=www.xxi.com/&lt;/p&gt;
&lt;h2&gt;分析&lt;/h2&gt;
&lt;p&gt;squid不自带 url重写/跳转 功能, 要实现这些功能需要借助 &lt;strong&gt;重定向器&lt;/strong&gt; 来解决&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;redirect_program&lt;/code&gt; 指定一个重定向器 来处理url的重写/跳转&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redirect_program&lt;/code&gt; 可以用perl/php/python 甚至shell来编写&lt;/p&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;使用squid的&lt;code&gt;redirect_program&lt;/code&gt; 指令 ,指定一个重定向器处理url跳转&lt;/p&gt;
&lt;p&gt;使用acl 匹配Iphone, Ipad, Android 平台&lt;/p&gt;
&lt;h2&gt;过程&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;tip&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;根据&lt;a href="http://home.arcor.de/pangj/squid/chap11.html#a1"&gt;squid权威手册&lt;/a&gt;
得知,重定向器从标准输出接收squid数据, 每一行包括以下4个元素:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请求url&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户IP地址和完全可验证域名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户名，通过RFC 1413 ident或代理验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP请求方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;exp: http://www.example.com/page1.html 192.168.2.3/- - GET&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;了解这个是非常重要的,本人就是因为一开始不知道这个,导致我的重定向器无法使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后, 重定向程序永不退出，除非在标准输入里发生end-of-file&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个也是很重要的,不然会导致重定向器的进程占用大量的cpu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后, 重定向器返回空行, squid将不会对url做任何处理,该怎样还是怎样&lt;/p&gt;
&lt;h3&gt;产生一个重定向消息&lt;/h3&gt;
&lt;p&gt;网络上很多是基于perl的. 由于我不擅长那家伙, 于是我就用python写了一个例子.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;URL_PATTERN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(?P&amp;lt;scheme&amp;gt;https?://)(?P&amp;lt;host&amp;gt;[^/]*)(?P&amp;lt;request&amp;gt;.*)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;GUIDE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^/mobile/xxx/mobile\.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;old_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;URL_PATTERN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;scheme&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;GUIDE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;new_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;302:http://www.xxx.com/mobile/xxx/mobile.html?ref=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;old_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_url&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;将此脚本给予 执行权限&lt;code&gt;chmod +x mobile_redirect.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在squid.conf中增加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;acl Debian browser Chrome 
acl Iphone browser -i (iPhone|iPad)
acl Android browser -i Android
redirect_program /squidpath/mobile_redirect.py
redirect_children 6
redirector_access allow Debian
redirector_access allow Iphone
redirector_access allow Android
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启squid之后, 观察结果&lt;/p&gt;
&lt;p&gt;客户端请求 www.xxx.com&lt;/p&gt;
&lt;p&gt;squid 日志中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1381544425.298      0 14.23.156.2 TCP_MISS/302 522 GET http://www.xx.com/mobile/
xxx/mobile.html?ref=http://www.xxx.com/ - NONE/- -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;客户端返回&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;HTTP/1.0 302 Moved Temporarily
Server: squid
Date: Sat, 12 Oct 2013 02:19:37 GMT
Content-Length: 0
Location: http://www.xx.com/mobile/xxx/mobile.html?ref=http://www.xxx.com/
X-Cache: MISS from 0.cnc.cache.xx.com
X-Cache-Lookup: HIT from 0.cnc.cache.xx.com:80
Via: 1.1 0.cnc.cache.xx.com:80 (squid)
Connection: close
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;squid 成功跳转&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;在本人处理这个需求的时候, 不了解squid跳转的过程和注意点,因此走了很多弯路.浪费很多
时间, 处理完毕之后,突然发现 其实squid跳转非常简单. 只要了解以上&lt;strong&gt;tip&lt;/strong&gt;就好了&lt;/p&gt;
&lt;p&gt;&lt;a href="http://home.arcor.de/pangj/squid/chap11.html#a1"&gt;参考文档&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2013-10-13:posts/2013/10/13/squid-url-tiao-zhuan/</guid><category>运维</category><category>squid</category></item><item><title>采用pelican静态blog</title><link>http://eleveni386.7axu.com/posts/2013/09/01/cai-yong-pelicanjing-tai-blog/</link><description>&lt;h2&gt;引子&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;因为我们的gtalk群组机器人需要更改Mysql为Mongo, 正好我也有想法使用静态博客程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在研究了几天&lt;code&gt;pelican&lt;/code&gt;之后, 今天就开始动手搬家了.. 唉,只是可惜了我哪些google收录的说 :-(&lt;/p&gt;
&lt;p&gt;最终效果如您所见.. 如何您是我和&lt;a href="(http://www.linuxzen.com/)"&gt;cold&lt;/a&gt;的熟人,那么别惊讶为何我的blog和他的那么相似.&lt;/p&gt;
&lt;p&gt;介个要归结于,&lt;code&gt;pelican&lt;/code&gt;有限的主题,和自己不擅长css的原因, 在众多主题中来回选择,
不断尝试,最终介个入围了...&lt;/p&gt;
&lt;p&gt;使用中的主题&lt;a href="(https://github.com/getpelican/pelican-themes/tree/master/tuxlite_tbs)"&gt;tuxlite_tbs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前已经可以正常访问, 不过还有一个问题存在, 本地与vps之间同步的问题, 本来在vps
上建立了一个git的仓库, 但是由于git极度不熟练的缘故,导致我push的文件,始终无法在
vps找到,更不要说设置nginx的root路径了, 于是,目前使用scp方式更新文件.... 表喷我傻... :-(&lt;/p&gt;
&lt;p&gt;经过这么几分钟的观察,感觉还算是满意的..&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Sun, 01 Sep 2013 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2013-09-01:posts/2013/09/01/cai-yong-pelicanjing-tai-blog/</guid><category>python</category><category>pelican</category></item><item><title>CLI简易密码管理工具</title><link>http://eleveni386.7axu.com/posts/2013/08/30/clijian-yi-mi-ma-guan-li-gong-ju/</link><description>&lt;p&gt;最近用上了&lt;strong&gt;tmux&lt;/strong&gt;, 抛弃了&lt;strong&gt;SecureCRT&lt;/strong&gt;,  但是没有便利的密码输入功能. 每次登录上服务器之后我都要将鼠标移动到状态栏 点击&lt;strong&gt;KeepassX&lt;/strong&gt;,然后在&lt;strong&gt;Keepassx&lt;/strong&gt;里面找到我需要的密码,然后在贴在&lt;strong&gt;tmux&lt;/strong&gt;上..完成一次密码输入过程.  &lt;/p&gt;
&lt;p&gt;这种过程与使用&lt;strong&gt;tmux&lt;/strong&gt;给我带来的便利(快捷键的存在,让我可以完全抛弃鼠标,事实用了&lt;strong&gt;tmux&lt;/strong&gt;我就没有使用鼠标了.) 格格不入.. 感觉就像开着一辆跑车.结果却时不时的要停下来加油.. 这种感觉十分难受..(不打点会死星人)  &lt;/p&gt;
&lt;p&gt;于是就想到一个办法, 利用&lt;strong&gt;tmux&lt;/strong&gt;的缓冲区, 来完成挑选密码的过程.  &lt;/p&gt;
&lt;p&gt;首先:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tmux&lt;/strong&gt;拥有自己的黏贴板,在&lt;strong&gt;tmux&lt;/strong&gt;中复制的时候,可以通过&lt;code&gt;tmux show-buffer&lt;/code&gt;找到复制的内容;&lt;/p&gt;
&lt;p&gt;然后:  &lt;/p&gt;
&lt;p&gt;使用一个工具,截获&lt;strong&gt;tmux&lt;/strong&gt;的缓冲,得到里面的ip, 根据ip地址去数据内寻找相应的密码;&lt;/p&gt;
&lt;p&gt;带着这个想法, 在群里询问了一下群友, 是否有命令行版本的密码管理工具, 群友推荐一个叫做&lt;a href="http://zx2c4.com/projects/password-store/"&gt;Pass&lt;/a&gt;的东西,经过试用,感觉不适合这个地方, 因为&lt;strong&gt;Pass&lt;/strong&gt;是交互式的CLI工具, 无法于tmux结合, 难到木有办法了? 那就自己动手吧&lt;/p&gt;
&lt;p&gt;经过一夜努力, 出来了这货&lt;a href="https://github.com/eleveni386/clipm"&gt;clipm.py&lt;/a&gt; 使用方法参考github的README&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Fri, 30 Aug 2013 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2013-08-30:posts/2013/08/30/clijian-yi-mi-ma-guan-li-gong-ju/</guid><category>tmux</category><category>运维</category></item><item><title>tmux多panel同步</title><link>http://eleveni386.7axu.com/posts/2013/08/23/tmuxduo-paneltong-bu/</link><description>&lt;p&gt;上一篇说过 我已经使用&lt;strong&gt;tmux&lt;/strong&gt; 代替&lt;strong&gt;SecureCRT&lt;/strong&gt;进行运维工作 , 
为此写了一个&lt;a href="https://github.com/eleveni386/clipm"&gt;密码管理工具&lt;/a&gt;,来配合&lt;strong&gt;tmux&lt;/strong&gt;使用,
经过两天的使用,感觉良好.&lt;strong&gt;KeepassX&lt;/strong&gt; 已经直接被我卸载了,今天要说的是&lt;strong&gt;SecureCRT&lt;/strong&gt;另外一个功能
&lt;strong&gt;批量执行命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用过&lt;strong&gt;SecureCRT&lt;/strong&gt;的孩纸,都知道它有一个很方便的功能,开启多个终端的时候,可以同时在这些终端输入命令,
极大的方便了我们的工作,我搬家到&lt;strong&gt;tmux&lt;/strong&gt; 也一直纠结这个功能.经过多次google之后 终于被我找到了.原来&lt;strong&gt;tmux&lt;/strong&gt;
也是有批量执行命令的, &lt;strong&gt;tmux panel sync&lt;/strong&gt;, &lt;strong&gt;panel同步&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://blog.sanctum.geek.nz/wp-content/uploads/2012/08/synchronize-panes.gif" /&gt;&lt;/p&gt;
&lt;p&gt;(PS:这里偷了别人的图,我懒得找gif制作工具)&lt;/p&gt;
&lt;p&gt;开启这个功能:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;:setw synchronize-panes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是一个开关,需要的时候键入, 不需要的时候键入同样的指令,即可关闭.&lt;/p&gt;
&lt;p&gt;友情提示:将它绑定到某一个快捷键上效果更佳哦 :-)&lt;/p&gt;
&lt;p&gt;btw, 我的tmux配置, 许多是参考网络上现有的.没太多个性化的东西.不过胜在实用&lt;/p&gt;
&lt;h2&gt;Base&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set -g default-terminal “screen-256color”
set -g display-time 3000
set -g history-limit 65535
set -g mouse-select-pane on
set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-window on
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Key bind&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;unbind C-b
set -g prefix C-l
bind C-l send-prefix

unbind ‘”‘
bind – splitw -v
unbind %
bind | splitw -h
bind c run “/usr/bin/python /home/eleven/Yunio/SystemBackup/tmux-shell/tmux-cpy.py”
bind r source-file ~/.tmux.conf \; display “Reloaded!”
bind s setw synchronize-panes

bind k selectp -U
bind j selectp -D
bind h selectp -L
bind l selectp -R
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;status bar&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set-option -g status-keys vi
set-option -g status-utf8 on
set-option -g status-interval 1
set-option -g status-justify “centre”
set-option -g status-left-length 60
set-option -g status-right-length 90
set-option -g status-left “#(/opt/data/soft/tmux-powerline/powerline.sh left)”
set-option -g status-right “#(/opt/data/soft/tmux-powerline/powerline.sh right)”
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Other&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set-window-option -g mode-keys vi
set-window-option -g utf8 on
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Fri, 23 Aug 2013 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2013-08-23:posts/2013/08/23/tmuxduo-paneltong-bu/</guid><category>tmux</category><category>运维</category></item><item><title>python带cookies访问</title><link>http://eleveni386.7axu.com/posts/2013/06/03/pythondai-cookiesfang-wen/</link><description>&lt;p&gt;本人是运维一枚,使用次数最多的就是Vandyke的&lt;a href="https://secure.vandyke.com/cgi-bin/download_form.php?pid=securecrt_ubuntu1264_deb_71&amp;amp;st=4&amp;amp;"&gt;SecureCRT&lt;/a&gt;.
在win系统下面有各种大牛
破解的scrt版本,但是在咱debian下面 就只能使用官方正版的,但是因为scrt是收费的,
而且还死贵死贵($99), 咱这种中下农,搞不起这货, 只能使用它的免费30天,时间一到,
要么就是删除它的认证文件,要么就是卸载原有的,然后重新安装, 非常麻烦…&lt;/p&gt;
&lt;p&gt;于是就想着能不能通过cron自动下载安装, 于是就有了第一版本的&lt;a href="(https://code.google.com/p/sharepythoncode/downloads/detail?name=Vandyke_update.py&amp;amp;can=2&amp;amp;q=)"&gt;Vandyke_update.py&lt;/a&gt; 脚本,
通过抓包分析到Vandyke 的post数据,通过urllib2提交,并下载, 跑了一年都挺好的, &lt;/p&gt;
&lt;p&gt;但是今天有同事(ubuntu)使用我的脚本自动更新的时候,发现无效了,返回信息提示”Bad product id”,
然后通过chrome的开发者工具跟踪了一下,发现post数据的字段改变了. 不再提供”sid”这个字段
(每次Vandyke用户登录之后都会在cookie中分配这个这个id,是不变的),只好重新分析它post内容,&lt;/p&gt;
&lt;p&gt;看见它post内容变的非常简单,只有两个字段:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pid(product id)&lt;/li&gt;
&lt;li&gt;status&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尝试了几次,发现它现在所有认证信息都是从cookies里面获取的, 咱就只能模拟登录,
保留cookies,带着cookies访问它的下载页面&lt;/p&gt;
&lt;p&gt;模拟登录,及带着cookies访问其他页面代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;urllib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cookielib&lt;/span&gt;

&lt;span class="n"&gt;cj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cookielib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CookieJar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;opener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPCookieProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install_opener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;securecrt_ubuntu1264_deb_71&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                          &lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;eleven.i386@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                          &lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*******&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                          &lt;span class="s"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;post2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;securecrt_ubuntu1264_deb_71&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
                          &lt;span class="s"&gt;&amp;#39;status&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://secure.vandyke.com/cgi-bin/account_verify.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;req2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://secure.vandyke.com/cgi-bin/download.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;post2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一段测试用的代码,请无视它那掉节操的变量名称,
实在不想花费脑细胞在测试代码的变量名称上(虽然正式代码的变量名称一样无节操)&lt;/p&gt;
&lt;h3&gt;参数说明&lt;/h3&gt;
&lt;p&gt;第一个post, 用于做登录. 提交用户名和密码,&lt;/p&gt;
&lt;p&gt;第二个post,用于发送下载请求,提交请求资源的id,和status(这玩意一直不知道干嘛的),
请求资源的文件名称,在第一个post的respose header的Content-Disposition字段里面,&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Mon, 03 Jun 2013 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2013-06-03:posts/2013/06/03/pythondai-cookiesfang-wen/</guid><category>python</category><category>桌面</category><category>运维</category></item><item><title>加密你的HTTP请求(穿墙)</title><link>http://eleveni386.7axu.com/posts/2013/05/17/jia-mi-ni-de-httpqing-qiu-chuan-qiang/</link><description>&lt;p&gt;之前用&lt;strong&gt;kangle&lt;/strong&gt;在香港的vps上做了一个http代理
  但是在使用的时候发现,访问国外的一些站点 还是无法正常访问,但是在vps上面访问正常,
而且kangle日志里面看见国外那些站点返回的状态码也是200,说明vps请求那些站点是没问题的
那么问题就是发生在客户端跟vps之间了,因为这一段的数据是明文的HTTP请求, 很容易被上层运营商过滤掉
那么我们就将客户端跟vps之间这段http过程加密就好了,&lt;/p&gt;
&lt;h2&gt;Stunnel&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Stunnel 是一种程序，使程序员和系统管理员可以很轻松地对任意 TCP 会话加密。
您可以很轻松地在客户机和服务器上启用 SSL ― 而且这样做不会影响程序源代码。
Stunnel 服务器主要执行两个功能：
一，首先，接收未加密的数据流，进行 SSL 加密，然后将其通过网络发送；
二，对已进行 SSL 加密的数据流进行解密，并将其通过网络发送给另一个程序
（该程序通常驻留在同一机器上，以避免本地网络上的窥探攻击）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.stunnel.org/downloads.html"&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;安装注意&lt;/h2&gt;
&lt;p&gt;在make install 的时候会要求你输入一些信息,用来生成证书, 按照提示输入即可&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;h3&gt;这里仅作为proxy&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;syslog = yes  #使用syslog日志
fips = no  #关闭fips , 如果你支持fips 默认就好了, 默认配置文件里面是没有这个的, 如果在启动stunnel服务的时候 提示fips 不支持那么就关闭它
cert = /youtpath/stunnel/etc/stunnel/stunnel.pem
然后将

;[pop3s]
;accept = 995
;connect = 110

;[imaps]
;accept = 993
;connect = 143

;[ssmtp]
;accept = 465
;connect = 25
注释掉, 注释符号 ;

新增加
[proxy]
accept = 8081
connect = 8082
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在&lt;strong&gt;Stunnel&lt;/strong&gt;已经配置好了, 监听8081端口, 转发到8082(kangle)&lt;/p&gt;
&lt;p&gt;服务端已经配置好, 接下来该客户端了&lt;/p&gt;
&lt;p&gt;在客户端上, 使用&lt;strong&gt;socat&lt;/strong&gt;工具, 也可以使用stunnel, 
不过proxy那里的connect就要写上远程主机的地址和端口, 为了简便,懒得去编译,就用socat&lt;/p&gt;
&lt;p&gt;如果的debian/ubuntu 用户直接apt-get 就可以安装
  &lt;code&gt;apt-get install socat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;socat tcp-listen:8082,fork openssl:tunnel-server:8081,verify=0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此处偷了&lt;a href="http://lilydjwg.is-programmer.com/2012/10/25/secure-your-http-proxy-with-tls-ssl.36107.html"&gt;依云&lt;/a&gt;
的例子 :-)&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;socat 将监听本地8082,然后加密tcp数据转发至tunnel主机的8081端口,
这样本地的http请求就被加密了, 上层运营商无法过滤你http请求了.可以畅快的访问各个站点&lt;/p&gt;
&lt;p&gt;我自己为了方便, 将上面的命令写到开机启动里面, 
这样每次开机就自动监听了本地的8082端口,我需要使用代理的时候 只要在浏览器上面切换就好了,&lt;/p&gt;
&lt;p&gt;我的浏览器是google-chrome 用的代理工具是SwitchySharp&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Fri, 17 May 2013 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2013-05-17:posts/2013/05/17/jia-mi-ni-de-httpqing-qiu-chuan-qiang/</guid><category>代理</category><category>安全</category><category>翻墙</category><category>http</category></item><item><title>网卡中断绑定</title><link>http://eleveni386.7axu.com/posts/2013/04/25/wang-qia-zhong-duan-bang-ding/</link><description>&lt;blockquote&gt;
&lt;p&gt;中断亲和力是指将一个或多个中断源绑定到特定的 CPU 上运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;操作&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://liuxin1982.blog.51cto.com/4338970/1019825"&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天我是来吐槽该文中的一个shell脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; setting up irq affinity according to /proc/interrupts&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; 2008-11-25 Robert Olsson&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; 2009-02-19 updated by Jesse Brandeburg&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; Dave Miller:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; (To get consistent naming in /proc/interrups)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; I would suggest that people use something like:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; char buf[IFNAMSIZ+6];&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; sprintf(buf, &amp;quot;%s-%s-%d&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;         netdev-&amp;gt;name,&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;  (RX_INTERRUPT ? &amp;quot;rx&amp;quot; : &amp;quot;tx&amp;quot;),&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;  queue-&amp;gt;index);&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;  Assuming a device with two RX and TX queues.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;  This script will assign: &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; eth0-rx-0  CPU0&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; eth0-rx-1  CPU1&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; eth0-tx-0  CPU0&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; eth0-tx-1  CPU1&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;set_affinity()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    MASK=&lt;/span&gt;&lt;span class="p"&gt;$((&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VEC&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    printf &amp;quot;%s mask=%X for /proc/irq/%d/smp_affinity\n&amp;quot; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MASK&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    printf &amp;quot;%X&amp;quot; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MASK&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; /proc/irq/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;/smp_affinity&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt; mask=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MASK&lt;/span&gt;&lt;span class="x"&gt; for /proc/irq/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;/smp_affinity&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MASK&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; /proc/irq/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;/smp_affinity&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;span class="x"&gt;if [ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;1&amp;quot; = &amp;quot;&amp;quot; ] ; then&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Description:&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;    This script attempts to bind each queue of a multi-queue NIC&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;    to the same numbered core, ie tx0¦rx0 --&amp;gt; cpu0, tx1¦rx1 --&amp;gt; cpu1&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;usage:&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;0 eth0 [eth1 eth2 eth3]&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; check for irqbalance running&lt;/span&gt;
&lt;span class="x"&gt;IRQBALANCE_ON=`ps ax ¦ grep -v grep ¦ grep -q irqbalance; echo &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;?`&lt;/span&gt;
&lt;span class="x"&gt;if [ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQBALANCE_ON&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;0&amp;quot; ] ; then&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot; WARNING: irqbalance is running and will&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;          likely override this script&amp;#39;s affinitization.&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;          Please stop the irqbalance service and/or execute&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;          &amp;#39;killall irqbalance&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; Set up the desired devices.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;for DEV in &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;*&lt;/span&gt;
&lt;span class="x"&gt;do&lt;/span&gt;
&lt;span class="x"&gt;for DIR in rx tx TxRx&lt;/span&gt;
&lt;span class="x"&gt;do&lt;/span&gt;
&lt;span class="x"&gt;    MAX=`grep &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt; /proc/interrupts ¦ wc -l`&lt;/span&gt;
&lt;span class="x"&gt;    if [ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MAX&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;0&amp;quot; ] ; then&lt;/span&gt;
&lt;span class="x"&gt;    MAX=`egrep -i &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;:.*&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; /proc/interrupts ¦ wc -l`&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;    if [ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MAX&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;0&amp;quot; ] ; then&lt;/span&gt;
&lt;span class="x"&gt;    echo no &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt; vectors found on &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    continue&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;exit&lt;/span&gt;&lt;span class="x"&gt; 1&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;    for VEC in `seq 0 1 &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MAX&lt;/span&gt;&lt;span class="x"&gt;`&lt;/span&gt;
&lt;span class="x"&gt;     do&lt;/span&gt;
&lt;span class="x"&gt;        IRQ=`cat /proc/interrupts ¦ grep -i &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt;-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VEC&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;  ¦ cut  -d:  -f1 ¦ sed &amp;quot;s/ //g&amp;quot;`&lt;/span&gt;
&lt;span class="x"&gt;        if [ -n  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; ]; then&lt;/span&gt;
&lt;span class="x"&gt;        set_affinity&lt;/span&gt;
&lt;span class="x"&gt;        else&lt;/span&gt;
&lt;span class="x"&gt;        IRQ=`cat /proc/interrupts ¦ egrep -i &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;:v&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VEC&lt;/span&gt;&lt;span class="x"&gt;-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;  ¦ cut  -d:  -f1 ¦ sed &amp;quot;s/ //g&amp;quot;`&lt;/span&gt;
&lt;span class="x"&gt;        if [ -n  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; ]; then&lt;/span&gt;
&lt;span class="x"&gt;            set_affinity&lt;/span&gt;
&lt;span class="x"&gt;        fi&lt;/span&gt;
&lt;span class="x"&gt;        fi&lt;/span&gt;
&lt;span class="x"&gt;    done&lt;/span&gt;
&lt;span class="x"&gt;done&lt;/span&gt;
&lt;span class="x"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;linux network子系统的负责人David Miller提供了一个脚本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个脚本一眼看上去 很正常的说, 可素对于现代服务器而言,其中隐含了一个很大的坑,
本人今天就亲身被坑了.&lt;/p&gt;
&lt;p&gt;看这段代码&lt;code&gt;MASK=$((1&amp;lt;&amp;lt;$VEC))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里是计算cpu掩码的, 比如网卡eth0 第一个队列eth0-0 那么这里的结果就是MASK=1
将0左移一位 得到2进制0b10 十进制1&lt;/p&gt;
&lt;p&gt;这样看是很正常.. 因为根据网络上大片的文章显示计算cpu掩码,就是第几个网卡队列
就位移几位, 比如一个4核4队列网卡, 第4队列的cpu掩码为 &lt;code&gt;1&amp;lt;&amp;lt;3&lt;/code&gt; 等于&lt;strong&gt;8&lt;/strong&gt; 
反推回去可以得到前面三个队列的cpu掩码, 然后将这个cpu掩码分别写入每个队列中断号
的&lt;strong&gt;smp_affinity&lt;/strong&gt;.类似这样:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo $((1&amp;lt;&amp;lt;3)) &amp;gt; /proc/irq/xx/smp_affinity&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样就将xx中断绑定到第4个cpu上&lt;/p&gt;
&lt;p&gt;这样看还是很符合规律的,但是假设我们的cpu是8核, 网卡队列也是8个呢..&lt;/p&gt;
&lt;p&gt;根据&lt;code&gt;$((1&amp;lt;&amp;lt;7))&lt;/code&gt;得到的cpu掩码将是&lt;strong&gt;128&lt;/strong&gt; ,然后将128写入xx中断的smp_affinity中,
观察发现:尼玛说好的绑定到第8个cpu上的呢.. 怎么跑到第4个cpu上了?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;73905753&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;IR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PCI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MSI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;5596608&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;IR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PCI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MSI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;5590023&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;IR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PCI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MSI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;5574803&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;IR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PCI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MSI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后我又放狗..找到这么一句话
&lt;strong&gt;计算cpu的方法第一颗为00000001换算成16进制为1，第2颗cpu为00000010换算成16进制为2，依次类推得出，第8颗cpu为80&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里有一个重点就是&lt;strong&gt;将2进制转换成16进制&lt;/strong&gt; 看到这里再看上面的脚本,
尼玛这不是坑爹么… &lt;code&gt;$((1&amp;lt;&amp;lt;n))&lt;/code&gt; 直接是将2进制给转成10进制了哇.. 假如n = 0-3的话,
还好. 结果还是正确的,但是一旦超过了3结果就开始偏差了..这样就直接导致我8核cpu8队
列网卡,在绑定中断的时候产生重叠…. 即队列0-3绑定到cpu0-3,队列4-7绑定到cpu0-3.. 坑爹呢….&lt;/p&gt;
&lt;p&gt;找到问题原因了, 于是就自己重写了一遍,&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c"&gt;#coding=utf8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;irq&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;#return irq number and network interface number&lt;/span&gt;
    &lt;span class="c"&gt;#exp:&lt;/span&gt;
    &lt;span class="c"&gt;#irq iface&lt;/span&gt;
    &lt;span class="c"&gt;#61  0&lt;/span&gt;
    &lt;span class="c"&gt;#62  1&lt;/span&gt;
    &lt;span class="n"&gt;cpunum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat /proc/cpuinfo¦grep &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;model name&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;¦wc -l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat /proc/interrupts ¦grep -E &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;eth[0-9]-&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;¦awk &amp;#39;{sub(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;eth[0-9]-&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;,$&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;);print $1,$&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;}&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpunum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpunum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[a-zA-Z]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irq_queuenum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# if exists irqbalance process,will killed&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;irqbalance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ps axu¦grep irqbalance¦grep -v grep¦wc -l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;irqbalance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pkill irqbalance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;irqbalance is kill&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;# set irq_affinity&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;irq_queuenum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;set_irq_affinity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_irq_affinity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IRQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MASK&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;echo &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; to /proc/irq/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/smp_affinity&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MASK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;IRQ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/proc/irq/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/smp_affinity&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;IRQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MASK&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irq&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;之所以研究中断亲和力,主要是为了增加网卡的负载能力,减少被大量小包攻击致死的几率.
将网卡的队列中断分别绑定到不同的&lt;strong&gt;Cpu Core&lt;/strong&gt;上,可以有效的提高小包负载能力,
由于之前我们前端服务器被小包攻击致死,因此这也是算我们的一种防御措施吧,&lt;/p&gt;
&lt;p&gt;附 参考资料:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.netzhou.net/?p=181"&gt;http://blog.netzhou.net/?p=181&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ibm.com/developerworks/cn/linux/l-cn-linuxkernelint/"&gt;http://www.ibm.com/developerworks/cn/linux/l-cn-linuxkernelint/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.igigo.net/archives/231"&gt;http://www.igigo.net/archives/231&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Thu, 25 Apr 2013 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2013-04-25:posts/2013/04/25/wang-qia-zhong-duan-bang-ding/</guid><category>脚本</category><category>运维</category></item><item><title>记. 一次ddos攻击,导致服务器死机</title><link>http://eleveni386.7axu.com/posts/2013/03/29/ji-yi-ci-ddosgong-ji-dao-zhi-fu-wu-qi-si-ji/</link><description>&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;某年某月某天,eleven所属单位 被未知生物ddos攻击, 攻击时间 凌晨00:15 左右, 
eleven不在现场.其他同事处理的, 第二天eleven来到公司, 接到上面命令找出服务器弱点.
同时还原攻击现场,&lt;/p&gt;
&lt;h2&gt;检查&lt;/h2&gt;
&lt;p&gt;通过&lt;strong&gt;Zenoss&lt;/strong&gt;监控图, 看见在00:15左右, 突然进来了大量的数据包, 大概40w左右, 
但是流量没有明显异常(即没有瞬间增高), 好吧, 看见这个现象就猜到了.. 小包&lt;strong&gt;DDos&lt;/strong&gt;攻击.
通过服务器的message日志里面看见了&lt;em&gt;syn flood on 80&lt;/em&gt; 记录,结合监控图上的大量数据包,
断定服务器被人采用&lt;strong&gt;syn半开攻击&lt;/strong&gt;手法给攻击&lt;/p&gt;
&lt;h2&gt;服务器配置&lt;/h2&gt;
&lt;p&gt;观察了服务器的内核参数配置,因为我记得我们所有服务器都有对于&lt;strong&gt;syn flood&lt;/strong&gt;的防御策略,
在sysctl.conf里面&lt;strong&gt;syn_cookies&lt;/strong&gt;已经开启, 而且也看见syn队列增加到了1w6, 
按理来说单纯的半开攻击应该对于我们机器是无压力的说.&lt;/p&gt;
&lt;p&gt;我们服务器是&lt;/p&gt;
&lt;p&gt;Dell R210&lt;/p&gt;
&lt;p&gt;Debian 6.0.7&lt;/p&gt;
&lt;p&gt;2.6.32 kernel&lt;/p&gt;
&lt;p&gt;网卡 Broadcom Corporation NetXtreme II BCM5716&lt;/p&gt;
&lt;p&gt;网卡驱动 bnx2 版本2.0.2&lt;/p&gt;
&lt;h2&gt;攻击模拟&lt;/h2&gt;
&lt;p&gt;一开始自己用scapy写了一个syn攻击脚本,但是发包速度太慢了.于是想起了&lt;strong&gt;hping3&lt;/strong&gt;,
这个东西,&lt;/p&gt;
&lt;p&gt;挑选两台机器A君,B君, 对主机1.2.3.4发起syn攻击&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hping3 -i u1 -S -p 80 1.2.3.4 –rand-source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;style type="text/css"&gt;p.ex {color:rgb(0,0,255)}&lt;/style&gt;
  &lt;p&gt;以上攻击命令,请勿随意尝试.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;2秒之后, 1.2.34 挂了..&amp;lt;(=－︿－=)&amp;gt;&lt;/p&gt;
&lt;p&gt;通过远程管理卡登录服务器发现,机器并没有死机, 只是网络不通了.机器无法ping通交换机,
交换机也无法ping通服务器, 重启服务器网卡, 恢复正常,判断网卡异常down掉. 找遍所有日志
kern.log, syslog.log, message.log, debug.log 都没有任何信息,仅有一条 syn flood on 80
和凌晨攻击的现象何其相似..&lt;/p&gt;
&lt;p&gt;经过一下午的不断测试.确定了仅用一台机器就可以瞬间秒挂1.2.3.4这台服务器, 
奇怪.我们机器怎么就这么脆弱…&lt;/p&gt;
&lt;p&gt;后来经过几次测试.排除了应用程序问题 替换nginx, lighttp, apache, 排除了交换机问题,
(白痴都想得到.交换机要是死了,我们所有业务就崩溃了),那么就剩下服务器自身的问题,
但是服务器没有死机.那么就只剩下服务器网卡..&lt;/p&gt;
&lt;p&gt;经过一番搜索..发现google上也有同志发现了&lt;em&gt;宝兰网卡&lt;/em&gt;异常down掉的情况. 看到这里,
我就找到一台Intel网卡的机器. 然后继续做ddos测试, 发现Intel网卡机器,虽然无法提供服务了..
系统被我拖的死死的.但是只要我停止攻击,系统就能很快的恢复. 而不会出现停止攻击了,
还无法登录服务器(网卡死掉). 可以肯定我们服务器这次浩劫的原因就是网卡的问题了..&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;到dell官方下载最新的bnx2驱动. 更新驱动之后,继续测试.. 这时不断怎么攻击,
都无法将网卡打死. 只能造成业务无法正常访问而已.&lt;/p&gt;
&lt;p&gt;没有做软中断的负载均衡.当攻击的时候网卡中断都集中在cpu0上,正常的数据包都被
攻击数据包给淹没了..自然无法提供服务.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Fri, 29 Mar 2013 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2013-03-29:posts/2013/03/29/ji-yi-ci-ddosgong-ji-dao-zhi-fu-wu-qi-si-ji/</guid><category>安全</category><category>运维</category><category>ddos</category></item><item><title>记一次安装fcitx过程</title><link>http://eleveni386.7axu.com/posts/2013/03/11/ji-yi-ci-an-zhuang-fcitxguo-cheng/</link><description>&lt;p&gt;今天实在无法忍受&lt;em&gt;ibus&lt;/em&gt;的启动速度和词汇准确性了. 将ibus更换成&lt;strong&gt;fcitx&lt;/strong&gt;, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get install fcitx
im-switch -s fcitx
im-switch -s fcitx -z default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在&lt;em&gt;autostart&lt;/em&gt;中加入fcitx的自启动.. 注销X界面之后, 发现fcitx是启动起来了, 
只是应用程序的默认输入法还是&lt;em&gt;Ibus&lt;/em&gt;, 于是google之 ,找到了fcitx环境变量设置, 
在&lt;strong&gt;~/.xprofile&lt;/strong&gt; 中加入fcitx的环境变量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;export GTK_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx
export QT_IM_MODULE=fcitx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注销X界面 再次进入系统,&lt;code&gt;echo $GTK_IM_MODULE&lt;/code&gt; 发现这个变量已经是fcitx, 但是应用
程序默认输入法还是&lt;strong&gt;Ibus&lt;/strong&gt; , 来来回回折腾了几次, 忍不住吐槽了下Ibus的无耻.. 
结果无意中dpkg -l |grep ibus 发现….:&lt;/p&gt;
&lt;p&gt;尼玛,为啥我系统里面还有ibus… 为啥我明明记得昨天已经将ibus给卸载了, 
… 唉, 咱这个记性哇 ,不过吐槽ibus的话咱还是不会收回的…. 
俗话不是说,该吐槽时就吐槽么… &lt;/p&gt;
&lt;p&gt;好了, 将ibus所有东西给卸载掉, 注销X界面 之后, 这个世界终于干净了!!!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Mon, 11 Mar 2013 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2013-03-11:posts/2013/03/11/ji-yi-ci-an-zhuang-fcitxguo-cheng/</guid><category>fcitx</category><category>桌面</category><category>输入法</category></item><item><title>修复zenoss3.2.1 graphs range bug</title><link>http://eleveni386.7axu.com/posts/2012/11/29/xiu-fu-zenoss321-graphs-range-bug/</link><description>&lt;p&gt;前段时间将&lt;strong&gt;zenoss&lt;/strong&gt;升级到3.2.1 (别问咱怎么使用这么老的版本,领导要求stable,
目前zenoss只有3.2.1是最新的stable版本),然后昨天使用的时候发现了一个小小的bug,
就是在device的graphs中, 选择range会出现性能图不更新的情况.&lt;/p&gt;
&lt;p&gt;要修复这个bug,确定&lt;em&gt;java&lt;/em&gt;版本是否大于1.6&lt;/p&gt;
&lt;p&gt;我自己debian 由于没有安装java 因此我这里安装一下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apt-get install sun-java6-jdk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后确认下java版本&lt;/p&gt;
&lt;p&gt;&lt;code&gt;java -version&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;java version “1.6.0_26″
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后切换到zenoss用户下执行以下操作 &lt;code&gt;su zenoss&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打上26403补丁&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/zenoss/zenoss/bin/zenpatch 26403&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Getting patch from Internet…

http://dev.zenoss.org/trac/changeset/26403?format=diff&amp;amp;new=26403

% Total % Received % Xferd Average Speed Time Time Time Current
Dload Upload Total Spent Left Speed
100 1899 0 1899 0 0 1845 0 –:–:– 0:00:01 –:–:– 2748
determining strip size for /usr/local/zenoss/zenoss/Products/r26403.patch

Applying patch with strip=3
patch -b –strip=3 &amp;lt; r26403.patch
(Stripping trailing CRs from patch.)
patching file ZenUI3/browser/resources/js/zenoss/ComponentPanel.js
(Stripping trailing CRs from patch.)
patching file ZenUI3/browser/resources/js/zenoss/form/graphPanel.js
zenoss@bgp-guangzhou-17:~$ wget http://dev.zenoss.org/trac/export/26262/trunk/inst/buildjs.sh
–2012-11-29 13:56:21– http://dev.zenoss.org/trac/export/26262/trunk/inst/buildjs.sh
Resolving dev.zenoss.org… 204.12.105.194
Connecting to dev.zenoss.org|204.12.105.194|:80… connected.
HTTP request sent, awaiting response… 200 OK
Length: 1714 (1.7K) [application/x-sh]
Saving to: “buildjs.sh.1”

100%[====================================

===================================

======================================

================&amp;gt;] 1,714 –.-K/s in 0s

2012-11-29 13:56:22 (388 MB/s) – “buildjs.sh.1” saved [1714/1714]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;26403&lt;/em&gt;中包括了&lt;em&gt;Graph&lt;/em&gt;和&lt;em&gt;Component&lt;/em&gt;两部分JS文件的更新，其主要功能是重新定义&lt;em&gt;setDrange&lt;/em&gt;方法，
并在选项中正确调用这一方法，使得性能图像中的时间范围与选项中的同步。&lt;/p&gt;
&lt;p&gt;具体说明见&lt;a href="http://dev.zenoss.org/trac/changeset/26403"&gt;http://dev.zenoss.org/trac/changeset/26403&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载JSBulid程序，运行使JS补丁生效&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://dev.zenoss.org/trac/export/26262/trunk/inst/buildjs.sh
sh buildjs.sh
/usr/local/zenoss/zenoss/bin/zopectl restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后清除浏览器历史记录，重新打开，即可&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;以上bug 我是在看到&lt;strong&gt;mura&lt;/strong&gt;的&lt;a href="(http://blog.chinaunix.net/uid-17326582-id-3187987.html)"&gt;BLOG&lt;/a&gt;才解决的&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Thu, 29 Nov 2012 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2012-11-29:posts/2012/11/29/xiu-fu-zenoss321-graphs-range-bug/</guid><category>监控工具</category><category>运维</category></item><item><title>sshpass 非交互ssh密码验证</title><link>http://eleveni386.7axu.com/posts/2012/09/09/sshpass-fei-jiao-hu-sshmi-ma-yan-zheng/</link><description>&lt;h2&gt;转载linuxtoy文章&lt;/h2&gt;
&lt;p&gt;OpenSSH 自带的 ssh 客户端程序（也就是 ‘ssh’ 命令）默认不允许你以非交互的方式传递密码，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh www.iredmail.org &amp;lt;&amp;lt;EOF ssh_password ls /var/ EOF
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Shell 里这样的输入重定向使用得非常普遍，而且通常都工作得很好。但是 ssh 不允许这
样的方式来传递密码，所以需要远程连上服务器后进行的批处理就无法进行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sshpass&lt;/code&gt; 的出现，解决了这一问题。它允许你用 &lt;code&gt;-p&lt;/code&gt; 参数指定明文密码，
然后直接登录远程服务器。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sshpass -p &amp;#39;ssh_password&amp;#39; ssh www.iredmail.org
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 &lt;code&gt;-p&lt;/code&gt; 指定了密码后，还需要在后面跟上标准的 ssh 连接命令。&lt;/p&gt;
&lt;p&gt;用法就是这么简单。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Sun, 09 Sep 2012 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2012-09-09:posts/2012/09/09/sshpass-fei-jiao-hu-sshmi-ma-yan-zheng/</guid><category>运维</category><category>工具</category></item><item><title>多线程ssh分发脚本</title><link>http://eleveni386.7axu.com/posts/2012/09/08/duo-xian-cheng-sshfen-fa-jiao-ben/</link><description>&lt;p&gt;说到自动化运维工具, 那是一个满天飞. 我也首推&lt;code&gt;puppet&lt;/code&gt;,无疑灰常的强大.但是强大
是强大. 就是有点依赖部署,如果部署不好,后期使用会很难受,各种不顺手. 现在我就是这样,
使用puppet是一个前辈部署的.我们puppet应用也灰常简单.就是做服务器应用平台初始化用,&lt;/p&gt;
&lt;p&gt;很多简单的操作.比如10几台需要更新杀毒软件,这个时候使用puppet,又需要重新建立配
置文件,(ps:都是前期没有做好规划).这样一个简单的工作就变的复杂话了,如果不使用自动
运维工具,那么… 恩. 你就将新的病毒库一个一个scp到各个主机上. 然后一个一个登录主
机,执行一遍&lt;code&gt;update&lt;/code&gt; 命令吧..&lt;/p&gt;
&lt;p&gt;这个时候如果有一个自动ssh登录工具, 并且具备&lt;code&gt;scp&lt;/code&gt;功能的工具就好了. 
我记得以前有一个叫做&lt;strong&gt;abs&lt;/strong&gt;的shell脚本. 利用&lt;strong&gt;ssh+sshpass+except&lt;/strong&gt; 做的自动登录ssh,
并且避免一个一个输入密码的烦恼, 这也是一个很不错的小工具, 不过..google了半天 
都没有线索.. 唉. 找不到这个工具..(有听过小道消息说这是TX内部的), 恰好,我之前使
用过&lt;strong&gt;abs&lt;/strong&gt;,知道这个小工具的功能. 于是… 就仿造了一个出来, 恩.. 名字呢. 就叫做&lt;strong&gt;pbs&lt;/strong&gt;.
是用&lt;strong&gt;python+paramiko&lt;/strong&gt;写的,总共300行不到的代码,功能主要是ssh登录,sftp上传,下载,
比abs好一点的就是,它是多线程的.&lt;/p&gt;
&lt;p&gt;目前,&lt;code&gt;pbs.py&lt;/code&gt; 已经服务了50+机器.是结合我这个前期部署糟糕的&lt;code&gt;puppet&lt;/code&gt;使用的.
今天做了一个效率对比(单线程的scp和多线程的pbs.py),&lt;/p&gt;
&lt;p&gt;实验环境:&lt;/p&gt;
&lt;p&gt;4台Debian5 机器 位于A机房(电信)&lt;/p&gt;
&lt;p&gt;1台Debian5 机器 位于 B机房 (双线) &lt;code&gt;pbs&lt;/code&gt;所在主机&lt;/p&gt;
&lt;p&gt;对比如下&lt;/p&gt;
&lt;p&gt;上传文件 clamav.tar.gz 79MB&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;scp                                            pbs

real 12m24.490s                           real 5m11.375s
user 0m28.462s                            user 0m30.842s
sys 0m1.924s                              sys 0m2.428s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上传文件 lighttpd.tar.gz 1.9MB&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;scp                                           pbs

real 0m44.138s                            real 0m10.583s
user 0m1.564s                             user 0m1.616s
sys 0m0.080s                              sys 0m0.116s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此对比效率 一见高下, 当然不是说&lt;strong&gt;scp&lt;/strong&gt;不好, 毕竟&lt;strong&gt;scp&lt;/strong&gt;经历了千锤百打.久经
考验,从代码效率.人气来说都毋庸质疑, 可惜的是&lt;strong&gt;scp&lt;/strong&gt;不是多线程工具.&lt;strong&gt;pbs&lt;/strong&gt;占据了多线程而已.&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;scp+sshpass+except&lt;/code&gt;, shell并发子进程也是可以高效的文件分发工作.不过… 
子进程跟线程之间的资源开销 就无法比较了..&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/sharepythoncode/"&gt;pbs.py&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">eleven.i386</dc:creator><pubDate>Sat, 08 Sep 2012 00:00:00 +0800</pubDate><guid>tag:eleveni386.7axu.com,2012-09-08:posts/2012/09/08/duo-xian-cheng-sshfen-fa-jiao-ben/</guid><category>python</category><category>运维</category></item></channel></rss>