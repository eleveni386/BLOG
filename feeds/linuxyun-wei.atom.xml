<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eleven.I386's Blog</title><link href="http://eleveni386.7axu.com/" rel="alternate"></link><link href="http://eleveni386.7axu.com/feeds/linuxyun-wei.atom.xml" rel="self"></link><id>http://eleveni386.7axu.com/</id><updated>2014-11-21T00:00:00+08:00</updated><entry><title>python版rm命令</title><link href="http://eleveni386.7axu.com/posts/2014/11/21/pythonban-rmming-ling/" rel="alternate"></link><updated>2014-11-21T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2014-11-21:posts/2014/11/21/pythonban-rmming-ling/</id><summary type="html">&lt;h1&gt;安全的linux rm 命令&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;-- python版rm命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;众所周知 linux 下 大杀器之一 rm 是多么恐怖的东西存在&lt;/p&gt;
&lt;p&gt;众多系统管理员 对此命令是又爱 又恨,  基于本人也是一枚系统管理员, 写下这个小 工具
方便自己 随心所欲的使用大杀器&lt;/p&gt;
&lt;p&gt;麻麻再也不用担心 我使用rm了&lt;/p&gt;
&lt;h2&gt;特性&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1.  删除日志记录
2. 安全目录
3. 垃圾箱机制
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参数&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;usage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[--&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;SAFE_DIR&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;...]]&lt;/span&gt;

&lt;span class="err"&gt;用于替换系统的&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt;&lt;span class="err"&gt;命令&lt;/span&gt;
&lt;span class="err"&gt;自带回收站&lt;/span&gt;
&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^/$&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^/home/?$&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;增加&lt;/span&gt;&lt;span class="sr"&gt;/ 和 /&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt; &lt;span class="err"&gt;目录不可删除&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;显示删除日志&lt;/span&gt;


&lt;span class="n"&gt;positional&lt;/span&gt; &lt;span class="k"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;                  &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="k"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;            &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;recursive&lt;/span&gt;       &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;directories&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="n"&gt;recursively&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;           &lt;span class="n"&gt;ignore&lt;/span&gt; &lt;span class="n"&gt;nonexistent&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;
     &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;                 &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;SAFE_DIR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;add_safe_dirs&lt;/span&gt; &lt;span class="n"&gt;SAFE_DIR&lt;/span&gt;
                         &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;safe&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt; &lt;span class="n"&gt;regex&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;默认安全目录&lt;/h2&gt;
&lt;p&gt;[Safe_dirs]&lt;/p&gt;
&lt;p&gt;safe_dirs = ['^/$', '^/home/?$', '^/usr/?$', '^/var/?$']&lt;/p&gt;
&lt;p&gt;可通过 &lt;code&gt;-a&lt;/code&gt;参数 添加 新的 安全目录 (&lt;strong&gt;每次添加一个目录&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;或 直接 在 &lt;code&gt;~/.Recycle/.Recycle.conf&lt;/code&gt;中添加&lt;/p&gt;
&lt;h2&gt;垃圾箱位置&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;~/.Recycle/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该目录下 存在两个隐藏文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.delete&lt;/code&gt;, &lt;code&gt;.Recycle.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;delete 是删除日志
Recycle.conf 是安全目录配置文件&lt;/p&gt;
&lt;h2&gt;获取&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;轻轻戳一下右上角的 Fork me on GitHub 哦
https://github.com/eleveni386/remove&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="python"></category><category term="Linux"></category><category term="命令"></category><category term="工具"></category></entry><entry><title>squid正向代理</title><link href="http://eleveni386.7axu.com/posts/2014/03/07/squidzheng-xiang-dai-li/" rel="alternate"></link><updated>2014-03-07T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2014-03-07:posts/2014/03/07/squidzheng-xiang-dai-li/</id><summary type="html">&lt;h2&gt;匿名代理&lt;/h2&gt;
&lt;p&gt;squid 要做到匿名代理 只需要添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;header_access Via deny all 
header_access  X-Forwarded-For deny all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即可&lt;/p&gt;
&lt;h2&gt;代理验证&lt;/h2&gt;
&lt;p&gt;谁都不想自己的代理服务器被他人随意拿来使用.. 于是 我们就需要给代理服务器加上密码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auth_param basic program /data/home/eleven/squid2.7/bin/ncsa_auth
auth_param basic children 1
auth_param basic realm &amp;quot;Welcome to eleven&amp;#39;s proxy server&amp;quot;
auth_param basic credentialsttl 12 hours
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的&lt;strong&gt;ncsa_auth&lt;/strong&gt; 是自己写的shell脚本, 我的squid版本是2.7, 没有自带ncsa_auth程序&lt;/p&gt;
&lt;h2&gt;一个简单的代理验证脚本&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;while true;&lt;/span&gt;
&lt;span class="x"&gt;do&lt;/span&gt;
&lt;span class="x"&gt;    read line&lt;/span&gt;
&lt;span class="x"&gt;    username=`echo &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="x"&gt; | awk &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;print &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;1}&amp;#39;`;&lt;/span&gt;
&lt;span class="x"&gt;    password=`echo &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="x"&gt; | awk &amp;#39;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;print &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;2}&amp;#39;`;&lt;/span&gt;

&lt;span class="x"&gt;    if [ &amp;quot;x&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;xeleven&amp;quot; ]&lt;/span&gt;
&lt;span class="x"&gt;    then&lt;/span&gt;
&lt;span class="x"&gt;        if [ &amp;quot;x&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;x*****&amp;quot; ]&lt;/span&gt;
&lt;span class="x"&gt;        then&lt;/span&gt;
&lt;span class="x"&gt;            echo OK;&lt;/span&gt;
&lt;span class="x"&gt;        else&lt;/span&gt;
&lt;span class="x"&gt;            echo Err;&lt;/span&gt;
&lt;span class="x"&gt;        fi  &lt;/span&gt;
&lt;span class="x"&gt;    else&lt;/span&gt;
&lt;span class="x"&gt;        echo Err;&lt;/span&gt;
&lt;span class="x"&gt;    fi  &lt;/span&gt;
&lt;span class="x"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个脚本有点类似之前的&lt;a href="http://eleveni386.7axu.com/posts/2013/10/13/squid-url-tiao-zhuan/"&gt;&lt;strong&gt;squid url跳转&lt;/strong&gt;&lt;/a&gt;
使用的脚本. 都是脚本从squid处接收需要处理的信息, 脚本处理完毕之后返回给squid结果&lt;/p&gt;
&lt;h2&gt;squid正向代理, 搭建 http 代理服务器&lt;/h2&gt;
&lt;p&gt;以下是一份完整的squid正向代理的配置文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auth_param basic program /data/home/eleven/squid2.7/bin/ncsa_auth
auth_param basic children 1
auth_param basic realm &amp;quot;Welcome to eleven&amp;#39;s proxy server&amp;quot;
auth_param basic credentialsttl 12 hours
acl all src all 
acl squid_user proxy_auth REQUIRED
acl manager proto cache_object
acl localhost src 127.0.0.1/32
acl SSL_ports port 443 
acl Safe_ports port 80      # http
acl Safe_ports port 21      # ftp
acl Safe_ports port 443     # https
acl CONNECT method CONNECT
http_access allow manager localhost
http_access deny manager
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost
# 允许密码用户登录
http_access allow squid_user
# 拒绝其他所有请求
http_access deny all
# Squid的监听端口
http_port **** # 不准暴力猜解我的密码. 哼
# DNS 域名服务器配置
dns_nameservers 8.8.8.8
# 启动squid2.7的用户
cache_effective_user eleven
cache_effective_group eleven
# squid2.7访问日志; 调试时开启
#cache_access_log /var/log/squid/access.log
#cache_log /var/log/squid/cache.log
# squid2.7挂掉后，core文件位置
coredump_dir /data/home/eleven/squid2.7/
# 高匿
header_access Via deny all
header_access  X-Forwarded-For deny all
# 出现cgi-bin或者？的URL不予缓存
hierarchy_stoplist cgi-bin ? \.php
acl QUERY urlpath_regex -i cgi-bin [^html]\? \.asp \.php \.jsp \.cgi
acl download urlpath_regex -i \.avi$ \.rmvb$ \.rm$ \.ra$ \.ram$ \.mpe$ \.smi$
cache deny QUERY
cache deny download
# 磁盘缓存目录
cache_dir ufs /data/home/eleven/squid2.7/cdir 500 16 256
# 内存缓冲大小
cache_mem 2M
# 刷新缓存规则
refresh_pattern ^ftp:       1440    20% 10080
refresh_pattern -i (/cgi-bin/|\?) 0 0%  0
refresh_pattern .       0   20% 4320
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;加密本地至squid的请求&lt;/h2&gt;
&lt;p&gt;前面的文章里面讲解过了使用&lt;strong&gt;Stunnel&lt;/strong&gt;做加密解密, 本地使用&lt;strong&gt;socat&lt;/strong&gt;做数据转发, 采用
&lt;strong&gt;openssl&lt;/strong&gt; 加密本地http数据,&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eleveni386.7axu.com/posts/2013/05/17/jia-mi-ni-de-httpqing-qiu-chuan-qiang/"&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;结束&lt;/h2&gt;
&lt;p&gt;至此, 一个全新的支持https访问的 http代理就搭建成功了. 第一次访问会要求你输入帐号和密码
相信看过本人此前的文章 都知道我曾经使用了一个叫做&lt;strong&gt;kangle&lt;/strong&gt;的工具 搭建了一个http代理.
不知道从什么时候开始 &lt;strong&gt;kangle&lt;/strong&gt; 搭建的代理 无法访问https协议的 站点. 于是,才迫使我
转而使用squid. &lt;/p&gt;</summary><category term="运维"></category><category term="Linux"></category><category term="squid"></category><category term="http代理"></category><category term="匿名代理"></category></entry><entry><title>记一次ssh密钥登录失败</title><link href="http://eleveni386.7axu.com/posts/2014/02/27/ji-yi-ci-sshmi-yao-deng-lu-shi-bai/" rel="alternate"></link><updated>2014-02-27T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2014-02-27:posts/2014/02/27/ji-yi-ci-sshmi-yao-deng-lu-shi-bai/</id><summary type="html">&lt;h2&gt;环境&lt;/h2&gt;
&lt;p&gt;我们的私钥是通过SecureCRT工具生成的. 在Debian5/6下面使用正常
有问题的主机是Debian7 系统, 客户端是Debian6 系统
Debian7 的ssh server版本是1.6 客户端的ssh client是1.5
使用的ssh协议均是2&lt;/p&gt;
&lt;h2&gt;现象&lt;/h2&gt;
&lt;p&gt;昨天我们一台Debian7主机, 无法通过私钥登录. 每次登录提示需要输入密码. 这是我们第一次使用Debian7的系统, 以往的主机都是Debian5/6的系统&lt;/p&gt;
&lt;p&gt;开启ssh的debug参数, 观看登录过程,发现如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;debug2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_type_from_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-----BEGIN&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;debug2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_type_from_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-----END&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;debug3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_read&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;whitespace&lt;/span&gt;
&lt;span class="n"&gt;debug3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_read&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;whitespace&lt;/span&gt;
&lt;span class="n"&gt;debug3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key_read&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;whitespace&lt;/span&gt;
&lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;排查&lt;/h2&gt;
&lt;p&gt;一开始看到这样的信息, 我以为是私钥格式不正确. 因为网络上一直流传着SecureCRT和Putty之类的工具,产生的密钥和ssh-keygen产生的 格式上有区别
不过从我们以往的经验上来看(Debian5/6) , SecureCRT生成的可以正常使用, &lt;/p&gt;
&lt;p&gt;虽然有这样的疑问 不过还是重新生成了一份密钥, 继续登录, 还是提示一样的问题, 我最后在Debian7 上 使用ssh-keygen生成一份密钥, 还是提示一样的问题
我突然醒悟过来, ssh兼容ssh1的协议. 于是ssh在登录的时候 会协商使用什么样的协议, 上面的提示问题应该是密钥格式不符合ssh1, 所以本次问题应该不是出
在私钥格式不对的问题, &lt;/p&gt;
&lt;p&gt;于是我去对比 ssh-keygen 产生的密钥 和 SecureCRT产生的有啥不同. 结果我发现 私钥里面写着root
我去.. 我的私钥是给cache用户用的, 私钥里面怎么会有root呢? &lt;/p&gt;
&lt;p&gt;小心翼翼的瞄了一眼 我的shell 提示符, &lt;strong&gt;#&lt;/strong&gt; 果果的出现了.... &lt;/p&gt;
&lt;p&gt;好吧, 为了排查方便我切换到了root下, 我却不记得了. &lt;/p&gt;
&lt;p&gt;切换到cache用户下 再次执行ssh-keygen &lt;/p&gt;
&lt;p&gt;在使用ssh-keygen的时候 有一个提示引起了我的注意 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    open /home/cache/.ssh/id_rsa failed: Permission denied
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为什么会Permission denied ? &lt;/p&gt;
&lt;p&gt;果断查看家目录下的 .ssh 目录权限.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    drw-r--r-- 2 cache cache 4096 Feb 27 11:03 .ssh/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我去, 说好的&lt;strong&gt;x&lt;/strong&gt;权限呢? &lt;/p&gt;
&lt;p&gt;给.ssh加上&lt;strong&gt;x&lt;/strong&gt;权限之后, 再次登录. 果断成功了... &lt;/p&gt;
&lt;h2&gt;结束&lt;/h2&gt;
&lt;p&gt;事后想想, 应该是用户在登录的时候, ssh要对用户提交的私钥做验证, 但是却无法进入.ssh目录, 就当作用户的公钥不存在, 于是要求用户使用密码方式&lt;/p&gt;</summary><category term="ssh"></category><category term="运维"></category><category term="密钥"></category><category term="Linux"></category></entry><entry><title>Squid Url 跳转</title><link href="http://eleveni386.7axu.com/posts/2013/10/13/squid-url-tiao-zhuan/" rel="alternate"></link><updated>2013-10-13T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2013-10-13:posts/2013/10/13/squid-url-tiao-zhuan/</id><summary type="html">&lt;h2&gt;需求&lt;/h2&gt;
&lt;p&gt;当Iphone/Ipad/Android 等访问 http://www.xxx.com 时跳转到 
http://www.xxx.com/mobile/xxx/mobile.html?ref=www.xxi.com/&lt;/p&gt;
&lt;h2&gt;分析&lt;/h2&gt;
&lt;p&gt;squid不自带 url重写/跳转 功能, 要实现这些功能需要借助 &lt;strong&gt;重定向器&lt;/strong&gt; 来解决&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;redirect_program&lt;/code&gt; 指定一个重定向器 来处理url的重写/跳转&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redirect_program&lt;/code&gt; 可以用perl/php/python 甚至shell来编写&lt;/p&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;p&gt;使用squid的&lt;code&gt;redirect_program&lt;/code&gt; 指令 ,指定一个重定向器处理url跳转&lt;/p&gt;
&lt;p&gt;使用acl 匹配Iphone, Ipad, Android 平台&lt;/p&gt;
&lt;h2&gt;过程&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;tip&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;根据&lt;a href="http://home.arcor.de/pangj/squid/chap11.html#a1"&gt;squid权威手册&lt;/a&gt;
得知,重定向器从标准输出接收squid数据, 每一行包括以下4个元素:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请求url&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户IP地址和完全可验证域名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户名，通过RFC 1413 ident或代理验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP请求方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;exp: http://www.example.com/page1.html 192.168.2.3/- - GET&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;了解这个是非常重要的,本人就是因为一开始不知道这个,导致我的重定向器无法使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后, 重定向程序永不退出，除非在标准输入里发生end-of-file&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个也是很重要的,不然会导致重定向器的进程占用大量的cpu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后, 重定向器返回空行, squid将不会对url做任何处理,该怎样还是怎样&lt;/p&gt;
&lt;h3&gt;产生一个重定向消息&lt;/h3&gt;
&lt;p&gt;网络上很多是基于perl的. 由于我不擅长那家伙, 于是我就用python写了一个例子.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;URL_PATTERN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;(?P&amp;lt;scheme&amp;gt;https?://)(?P&amp;lt;host&amp;gt;[^/]*)(?P&amp;lt;request&amp;gt;.*)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;GUIDE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;^/mobile/xxx/mobile\.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;old_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;URL_PATTERN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;scheme&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;GUIDE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;new_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;302:http://www.xxx.com/mobile/xxx/mobile.html?ref=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;old_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_url&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;将此脚本给予 执行权限&lt;code&gt;chmod +x mobile_redirect.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在squid.conf中增加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;acl Debian browser Chrome 
acl Iphone browser -i (iPhone|iPad)
acl Android browser -i Android
redirect_program /squidpath/mobile_redirect.py
redirect_children 6
redirector_access allow Debian
redirector_access allow Iphone
redirector_access allow Android
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重启squid之后, 观察结果&lt;/p&gt;
&lt;p&gt;客户端请求 www.xxx.com&lt;/p&gt;
&lt;p&gt;squid 日志中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1381544425.298      0 14.23.156.2 TCP_MISS/302 522 GET http://www.xx.com/mobile/
xxx/mobile.html?ref=http://www.xxx.com/ - NONE/- -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;客户端返回&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;HTTP/1.0 302 Moved Temporarily
Server: squid
Date: Sat, 12 Oct 2013 02:19:37 GMT
Content-Length: 0
Location: http://www.xx.com/mobile/xxx/mobile.html?ref=http://www.xxx.com/
X-Cache: MISS from 0.cnc.cache.xx.com
X-Cache-Lookup: HIT from 0.cnc.cache.xx.com:80
Via: 1.1 0.cnc.cache.xx.com:80 (squid)
Connection: close
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;squid 成功跳转&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;在本人处理这个需求的时候, 不了解squid跳转的过程和注意点,因此走了很多弯路.浪费很多
时间, 处理完毕之后,突然发现 其实squid跳转非常简单. 只要了解以上&lt;strong&gt;tip&lt;/strong&gt;就好了&lt;/p&gt;
&lt;p&gt;&lt;a href="http://home.arcor.de/pangj/squid/chap11.html#a1"&gt;参考文档&lt;/a&gt;&lt;/p&gt;</summary><category term="运维"></category><category term="squid"></category></entry><entry><title>加密你的HTTP请求(穿墙)</title><link href="http://eleveni386.7axu.com/posts/2013/05/17/jia-mi-ni-de-httpqing-qiu-chuan-qiang/" rel="alternate"></link><updated>2013-05-17T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2013-05-17:posts/2013/05/17/jia-mi-ni-de-httpqing-qiu-chuan-qiang/</id><summary type="html">&lt;p&gt;之前用&lt;strong&gt;kangle&lt;/strong&gt;在香港的vps上做了一个http代理
  但是在使用的时候发现,访问国外的一些站点 还是无法正常访问,但是在vps上面访问正常,
而且kangle日志里面看见国外那些站点返回的状态码也是200,说明vps请求那些站点是没问题的
那么问题就是发生在客户端跟vps之间了,因为这一段的数据是明文的HTTP请求, 很容易被上层运营商过滤掉
那么我们就将客户端跟vps之间这段http过程加密就好了,&lt;/p&gt;
&lt;h2&gt;Stunnel&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Stunnel 是一种程序，使程序员和系统管理员可以很轻松地对任意 TCP 会话加密。
您可以很轻松地在客户机和服务器上启用 SSL ― 而且这样做不会影响程序源代码。
Stunnel 服务器主要执行两个功能：
一，首先，接收未加密的数据流，进行 SSL 加密，然后将其通过网络发送；
二，对已进行 SSL 加密的数据流进行解密，并将其通过网络发送给另一个程序
（该程序通常驻留在同一机器上，以避免本地网络上的窥探攻击）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.stunnel.org/downloads.html"&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;安装注意&lt;/h2&gt;
&lt;p&gt;在make install 的时候会要求你输入一些信息,用来生成证书, 按照提示输入即可&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;h3&gt;这里仅作为proxy&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;syslog = yes  #使用syslog日志
fips = no  #关闭fips , 如果你支持fips 默认就好了, 默认配置文件里面是没有这个的, 如果在启动stunnel服务的时候 提示fips 不支持那么就关闭它
cert = /youtpath/stunnel/etc/stunnel/stunnel.pem
然后将

;[pop3s]
;accept = 995
;connect = 110

;[imaps]
;accept = 993
;connect = 143

;[ssmtp]
;accept = 465
;connect = 25
注释掉, 注释符号 ;

新增加
[proxy]
accept = 8081
connect = 8082
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在&lt;strong&gt;Stunnel&lt;/strong&gt;已经配置好了, 监听8081端口, 转发到8082(kangle)&lt;/p&gt;
&lt;p&gt;服务端已经配置好, 接下来该客户端了&lt;/p&gt;
&lt;p&gt;在客户端上, 使用&lt;strong&gt;socat&lt;/strong&gt;工具, 也可以使用stunnel, 
不过proxy那里的connect就要写上远程主机的地址和端口, 为了简便,懒得去编译,就用socat&lt;/p&gt;
&lt;p&gt;如果的debian/ubuntu 用户直接apt-get 就可以安装
  &lt;code&gt;apt-get install socat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;socat tcp-listen:8082,fork openssl:tunnel-server:8081,verify=0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此处偷了&lt;a href="http://lilydjwg.is-programmer.com/2012/10/25/secure-your-http-proxy-with-tls-ssl.36107.html"&gt;依云&lt;/a&gt;
的例子 :-)&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;socat 将监听本地8082,然后加密tcp数据转发至tunnel主机的8081端口,
这样本地的http请求就被加密了, 上层运营商无法过滤你http请求了.可以畅快的访问各个站点&lt;/p&gt;
&lt;p&gt;我自己为了方便, 将上面的命令写到开机启动里面, 
这样每次开机就自动监听了本地的8082端口,我需要使用代理的时候 只要在浏览器上面切换就好了,&lt;/p&gt;
&lt;p&gt;我的浏览器是google-chrome 用的代理工具是SwitchySharp&lt;/p&gt;</summary><category term="代理"></category><category term="安全"></category><category term="翻墙"></category><category term="http"></category></entry><entry><title>网卡中断绑定</title><link href="http://eleveni386.7axu.com/posts/2013/04/25/wang-qia-zhong-duan-bang-ding/" rel="alternate"></link><updated>2013-04-25T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2013-04-25:posts/2013/04/25/wang-qia-zhong-duan-bang-ding/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;中断亲和力是指将一个或多个中断源绑定到特定的 CPU 上运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;操作&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://liuxin1982.blog.51cto.com/4338970/1019825"&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天我是来吐槽该文中的一个shell脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; setting up irq affinity according to /proc/interrupts&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; 2008-11-25 Robert Olsson&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; 2009-02-19 updated by Jesse Brandeburg&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; Dave Miller:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; (To get consistent naming in /proc/interrups)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; I would suggest that people use something like:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; char buf[IFNAMSIZ+6];&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; sprintf(buf, &amp;quot;%s-%s-%d&amp;quot;,&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;         netdev-&amp;gt;name,&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;  (RX_INTERRUPT ? &amp;quot;rx&amp;quot; : &amp;quot;tx&amp;quot;),&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;  queue-&amp;gt;index);&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;  Assuming a device with two RX and TX queues.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;  This script will assign: &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; eth0-rx-0  CPU0&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; eth0-rx-1  CPU1&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; eth0-tx-0  CPU0&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; eth0-tx-1  CPU1&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;set_affinity()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    MASK=&lt;/span&gt;&lt;span class="p"&gt;$((&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VEC&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    printf &amp;quot;%s mask=%X for /proc/irq/%d/smp_affinity\n&amp;quot; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MASK&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    printf &amp;quot;%X&amp;quot; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MASK&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; /proc/irq/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;/smp_affinity&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt; mask=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MASK&lt;/span&gt;&lt;span class="x"&gt; for /proc/irq/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;/smp_affinity&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;echo&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MASK&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; /proc/irq/&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;/smp_affinity&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;span class="x"&gt;if [ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;1&amp;quot; = &amp;quot;&amp;quot; ] ; then&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Description:&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;    This script attempts to bind each queue of a multi-queue NIC&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;    to the same numbered core, ie tx0¦rx0 --&amp;gt; cpu0, tx1¦rx1 --&amp;gt; cpu1&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;usage:&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;0 eth0 [eth1 eth2 eth3]&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; check for irqbalance running&lt;/span&gt;
&lt;span class="x"&gt;IRQBALANCE_ON=`ps ax ¦ grep -v grep ¦ grep -q irqbalance; echo &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;?`&lt;/span&gt;
&lt;span class="x"&gt;if [ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQBALANCE_ON&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;0&amp;quot; ] ; then&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot; WARNING: irqbalance is running and will&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;          likely override this script&amp;#39;s affinitization.&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;          Please stop the irqbalance service and/or execute&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;          &amp;#39;killall irqbalance&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;fi&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; Set up the desired devices.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;for DEV in &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;*&lt;/span&gt;
&lt;span class="x"&gt;do&lt;/span&gt;
&lt;span class="x"&gt;for DIR in rx tx TxRx&lt;/span&gt;
&lt;span class="x"&gt;do&lt;/span&gt;
&lt;span class="x"&gt;    MAX=`grep &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt; /proc/interrupts ¦ wc -l`&lt;/span&gt;
&lt;span class="x"&gt;    if [ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MAX&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;0&amp;quot; ] ; then&lt;/span&gt;
&lt;span class="x"&gt;    MAX=`egrep -i &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;:.*&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; /proc/interrupts ¦ wc -l`&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;    if [ &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MAX&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; == &amp;quot;0&amp;quot; ] ; then&lt;/span&gt;
&lt;span class="x"&gt;    echo no &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt; vectors found on &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    continue&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="nf"&gt;exit&lt;/span&gt;&lt;span class="x"&gt; 1&lt;/span&gt;
&lt;span class="x"&gt;    fi&lt;/span&gt;
&lt;span class="x"&gt;    for VEC in `seq 0 1 &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MAX&lt;/span&gt;&lt;span class="x"&gt;`&lt;/span&gt;
&lt;span class="x"&gt;     do&lt;/span&gt;
&lt;span class="x"&gt;        IRQ=`cat /proc/interrupts ¦ grep -i &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt;-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VEC&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;  ¦ cut  -d:  -f1 ¦ sed &amp;quot;s/ //g&amp;quot;`&lt;/span&gt;
&lt;span class="x"&gt;        if [ -n  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; ]; then&lt;/span&gt;
&lt;span class="x"&gt;        set_affinity&lt;/span&gt;
&lt;span class="x"&gt;        else&lt;/span&gt;
&lt;span class="x"&gt;        IRQ=`cat /proc/interrupts ¦ egrep -i &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DEV&lt;/span&gt;&lt;span class="x"&gt;:v&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;VEC&lt;/span&gt;&lt;span class="x"&gt;-&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;  ¦ cut  -d:  -f1 ¦ sed &amp;quot;s/ //g&amp;quot;`&lt;/span&gt;
&lt;span class="x"&gt;        if [ -n  &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;IRQ&lt;/span&gt;&lt;span class="x"&gt;&amp;quot; ]; then&lt;/span&gt;
&lt;span class="x"&gt;            set_affinity&lt;/span&gt;
&lt;span class="x"&gt;        fi&lt;/span&gt;
&lt;span class="x"&gt;        fi&lt;/span&gt;
&lt;span class="x"&gt;    done&lt;/span&gt;
&lt;span class="x"&gt;done&lt;/span&gt;
&lt;span class="x"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;linux network子系统的负责人David Miller提供了一个脚本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个脚本一眼看上去 很正常的说, 可素对于现代服务器而言,其中隐含了一个很大的坑,
本人今天就亲身被坑了.&lt;/p&gt;
&lt;p&gt;看这段代码&lt;code&gt;MASK=$((1&amp;lt;&amp;lt;$VEC))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里是计算cpu掩码的, 比如网卡eth0 第一个队列eth0-0 那么这里的结果就是MASK=1
将0左移一位 得到2进制0b10 十进制1&lt;/p&gt;
&lt;p&gt;这样看是很正常.. 因为根据网络上大片的文章显示计算cpu掩码,就是第几个网卡队列
就位移几位, 比如一个4核4队列网卡, 第4队列的cpu掩码为 &lt;code&gt;1&amp;lt;&amp;lt;3&lt;/code&gt; 等于&lt;strong&gt;8&lt;/strong&gt; 
反推回去可以得到前面三个队列的cpu掩码, 然后将这个cpu掩码分别写入每个队列中断号
的&lt;strong&gt;smp_affinity&lt;/strong&gt;.类似这样:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo $((1&amp;lt;&amp;lt;3)) &amp;gt; /proc/irq/xx/smp_affinity&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样就将xx中断绑定到第4个cpu上&lt;/p&gt;
&lt;p&gt;这样看还是很符合规律的,但是假设我们的cpu是8核, 网卡队列也是8个呢..&lt;/p&gt;
&lt;p&gt;根据&lt;code&gt;$((1&amp;lt;&amp;lt;7))&lt;/code&gt;得到的cpu掩码将是&lt;strong&gt;128&lt;/strong&gt; ,然后将128写入xx中断的smp_affinity中,
观察发现:尼玛说好的绑定到第8个cpu上的呢.. 怎么跑到第4个cpu上了?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;73905753&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;IR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PCI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MSI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;5596608&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;IR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PCI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MSI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;5590023&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;IR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PCI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MSI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;5574803&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;IR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PCI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MSI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后我又放狗..找到这么一句话
&lt;strong&gt;计算cpu的方法第一颗为00000001换算成16进制为1，第2颗cpu为00000010换算成16进制为2，依次类推得出，第8颗cpu为80&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里有一个重点就是&lt;strong&gt;将2进制转换成16进制&lt;/strong&gt; 看到这里再看上面的脚本,
尼玛这不是坑爹么… &lt;code&gt;$((1&amp;lt;&amp;lt;n))&lt;/code&gt; 直接是将2进制给转成10进制了哇.. 假如n = 0-3的话,
还好. 结果还是正确的,但是一旦超过了3结果就开始偏差了..这样就直接导致我8核cpu8队
列网卡,在绑定中断的时候产生重叠…. 即队列0-3绑定到cpu0-3,队列4-7绑定到cpu0-3.. 坑爹呢….&lt;/p&gt;
&lt;p&gt;找到问题原因了, 于是就自己重写了一遍,&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c"&gt;#coding=utf8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;irq&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;#return irq number and network interface number&lt;/span&gt;
    &lt;span class="c"&gt;#exp:&lt;/span&gt;
    &lt;span class="c"&gt;#irq iface&lt;/span&gt;
    &lt;span class="c"&gt;#61  0&lt;/span&gt;
    &lt;span class="c"&gt;#62  1&lt;/span&gt;
    &lt;span class="n"&gt;cpunum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat /proc/cpuinfo¦grep &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;model name&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;¦wc -l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cat /proc/interrupts ¦grep -E &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;eth[0-9]-&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;¦awk &amp;#39;{sub(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;eth[0-9]-&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;,$&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;);print $1,$&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;}&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpunum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpunum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[a-zA-Z]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irq_queuenum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# if exists irqbalance process,will killed&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;irqbalance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ps axu¦grep irqbalance¦grep -v grep¦wc -l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;irqbalance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pkill irqbalance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;irqbalance is kill&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;# set irq_affinity&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;irq_queuenum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;set_irq_affinity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;0x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_irq_affinity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IRQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MASK&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;echo &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; to /proc/irq/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/smp_affinity&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MASK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;IRQ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/proc/irq/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;/smp_affinity&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;IRQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MASK&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;irq&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;之所以研究中断亲和力,主要是为了增加网卡的负载能力,减少被大量小包攻击致死的几率.
将网卡的队列中断分别绑定到不同的&lt;strong&gt;Cpu Core&lt;/strong&gt;上,可以有效的提高小包负载能力,
由于之前我们前端服务器被小包攻击致死,因此这也是算我们的一种防御措施吧,&lt;/p&gt;
&lt;p&gt;附 参考资料:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.netzhou.net/?p=181"&gt;http://blog.netzhou.net/?p=181&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ibm.com/developerworks/cn/linux/l-cn-linuxkernelint/"&gt;http://www.ibm.com/developerworks/cn/linux/l-cn-linuxkernelint/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.igigo.net/archives/231"&gt;http://www.igigo.net/archives/231&lt;/a&gt;&lt;/p&gt;</summary><category term="脚本"></category><category term="运维"></category></entry><entry><title>记. 一次ddos攻击,导致服务器死机</title><link href="http://eleveni386.7axu.com/posts/2013/03/29/ji-yi-ci-ddosgong-ji-dao-zhi-fu-wu-qi-si-ji/" rel="alternate"></link><updated>2013-03-29T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2013-03-29:posts/2013/03/29/ji-yi-ci-ddosgong-ji-dao-zhi-fu-wu-qi-si-ji/</id><summary type="html">&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;某年某月某天,eleven所属单位 被未知生物ddos攻击, 攻击时间 凌晨00:15 左右, 
eleven不在现场.其他同事处理的, 第二天eleven来到公司, 接到上面命令找出服务器弱点.
同时还原攻击现场,&lt;/p&gt;
&lt;h2&gt;检查&lt;/h2&gt;
&lt;p&gt;通过&lt;strong&gt;Zenoss&lt;/strong&gt;监控图, 看见在00:15左右, 突然进来了大量的数据包, 大概40w左右, 
但是流量没有明显异常(即没有瞬间增高), 好吧, 看见这个现象就猜到了.. 小包&lt;strong&gt;DDos&lt;/strong&gt;攻击.
通过服务器的message日志里面看见了&lt;em&gt;syn flood on 80&lt;/em&gt; 记录,结合监控图上的大量数据包,
断定服务器被人采用&lt;strong&gt;syn半开攻击&lt;/strong&gt;手法给攻击&lt;/p&gt;
&lt;h2&gt;服务器配置&lt;/h2&gt;
&lt;p&gt;观察了服务器的内核参数配置,因为我记得我们所有服务器都有对于&lt;strong&gt;syn flood&lt;/strong&gt;的防御策略,
在sysctl.conf里面&lt;strong&gt;syn_cookies&lt;/strong&gt;已经开启, 而且也看见syn队列增加到了1w6, 
按理来说单纯的半开攻击应该对于我们机器是无压力的说.&lt;/p&gt;
&lt;p&gt;我们服务器是&lt;/p&gt;
&lt;p&gt;Dell R210&lt;/p&gt;
&lt;p&gt;Debian 6.0.7&lt;/p&gt;
&lt;p&gt;2.6.32 kernel&lt;/p&gt;
&lt;p&gt;网卡 Broadcom Corporation NetXtreme II BCM5716&lt;/p&gt;
&lt;p&gt;网卡驱动 bnx2 版本2.0.2&lt;/p&gt;
&lt;h2&gt;攻击模拟&lt;/h2&gt;
&lt;p&gt;一开始自己用scapy写了一个syn攻击脚本,但是发包速度太慢了.于是想起了&lt;strong&gt;hping3&lt;/strong&gt;,
这个东西,&lt;/p&gt;
&lt;p&gt;挑选两台机器A君,B君, 对主机1.2.3.4发起syn攻击&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hping3 -i u1 -S -p 80 1.2.3.4 –rand-source&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;style type="text/css"&gt;p.ex {color:rgb(0,0,255)}&lt;/style&gt;
  &lt;p&gt;以上攻击命令,请勿随意尝试.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;2秒之后, 1.2.34 挂了..&amp;lt;(=－︿－=)&amp;gt;&lt;/p&gt;
&lt;p&gt;通过远程管理卡登录服务器发现,机器并没有死机, 只是网络不通了.机器无法ping通交换机,
交换机也无法ping通服务器, 重启服务器网卡, 恢复正常,判断网卡异常down掉. 找遍所有日志
kern.log, syslog.log, message.log, debug.log 都没有任何信息,仅有一条 syn flood on 80
和凌晨攻击的现象何其相似..&lt;/p&gt;
&lt;p&gt;经过一下午的不断测试.确定了仅用一台机器就可以瞬间秒挂1.2.3.4这台服务器, 
奇怪.我们机器怎么就这么脆弱…&lt;/p&gt;
&lt;p&gt;后来经过几次测试.排除了应用程序问题 替换nginx, lighttp, apache, 排除了交换机问题,
(白痴都想得到.交换机要是死了,我们所有业务就崩溃了),那么就剩下服务器自身的问题,
但是服务器没有死机.那么就只剩下服务器网卡..&lt;/p&gt;
&lt;p&gt;经过一番搜索..发现google上也有同志发现了&lt;em&gt;宝兰网卡&lt;/em&gt;异常down掉的情况. 看到这里,
我就找到一台Intel网卡的机器. 然后继续做ddos测试, 发现Intel网卡机器,虽然无法提供服务了..
系统被我拖的死死的.但是只要我停止攻击,系统就能很快的恢复. 而不会出现停止攻击了,
还无法登录服务器(网卡死掉). 可以肯定我们服务器这次浩劫的原因就是网卡的问题了..&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;到dell官方下载最新的bnx2驱动. 更新驱动之后,继续测试.. 这时不断怎么攻击,
都无法将网卡打死. 只能造成业务无法正常访问而已.&lt;/p&gt;
&lt;p&gt;没有做软中断的负载均衡.当攻击的时候网卡中断都集中在cpu0上,正常的数据包都被
攻击数据包给淹没了..自然无法提供服务.&lt;/p&gt;</summary><category term="安全"></category><category term="运维"></category><category term="ddos"></category></entry></feed>