<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eleven.I386's Blog</title><link href="http://eleveni386.7axu.com/" rel="alternate"></link><link href="http://eleveni386.7axu.com/feeds/linuxzhuo-mian.atom.xml" rel="self"></link><id>http://eleveni386.7axu.com/</id><updated>2015-12-21T00:00:00+08:00</updated><entry><title>flvcd广告绕过</title><link href="http://eleveni386.7axu.com/posts/2015/12/21/flvcdyan-gao-rao-guo/" rel="alternate"></link><updated>2015-12-21T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2015-12-21:posts/2015/12/21/flvcdyan-gao-rao-guo/</id><summary type="html">&lt;h1&gt;背景&lt;/h1&gt;
&lt;p&gt;原本是想寻找让mplayer播放youku视频的. 但是想了好多种方法. 都不知道如何让mplayer接管flash来播放视频. 最终在研究这个问题的过程中.发现了flvcd居然出现了,广告!!!, 虽然我能理解flvcd的做法.毕竟他们破解了人家视频网站的加密url, 让他们损失了不少的广告流量. 但是flvcd好歹提供一种更加友好(自动化)的广告播放方式吖. 你用flash是算什么吖!  &lt;/p&gt;
&lt;h1&gt;flvcd广告&lt;/h1&gt;
&lt;p&gt;flvcd目前限制了部分浏览器访问(或许是操作系统.比如我Linux系统访问时. 就会出现apache的欢迎页), 通过修改浏览器UA即可. 
  然后在点击Go之后, 跳转到本来应该是视频真实地址列表页. 但是这里出现了原视频的广告列表. 要求用户必须浏览其中任意一个广告,才能出现真实地址列表.&lt;/p&gt;
&lt;p&gt;点击其中一个广告之后. 出现flash的播放器. 不过好歹flvcd还是比较良心. 只需要等待3秒. 就可以选择跳过广告了. 虽然良心. 但是我是需要自动化获取真实地址的. 于是我被这个广告列表拦截了. 通过多次尝试. 发现flvcd在广告播放完毕之后, 会在cookie中增加2个新键&lt;code&gt;go&lt;/code&gt;, &lt;code&gt;avdGggggtt&lt;/code&gt;,  其中多次观察.&lt;code&gt;go&lt;/code&gt;参数是一个加密值, &lt;code&gt;avdGggggtt&lt;/code&gt;是当前的时间戳, 有了这个发现.那么可以认为. 我如果要提交一个视频页地址给flvcd帮我解析. 那么势必我需要带上这两个参数. 不然就会出现广告页. 那么问题来了 &lt;code&gt;go&lt;/code&gt; 参数如何得到. 他是怎么计算出来的 &lt;/p&gt;
&lt;h1&gt;破解之路&lt;/h1&gt;
&lt;p&gt;首先想到的就是&lt;em&gt;swf&lt;/em&gt;了, 他的广告播放器. 因为每次都是广告结束之后, 才会写入cookie. 于是我用wget下载了他的swf播放器.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wget 'http://www.flvcd.com/swf/avd.swf?v=20151126' --user-agent='Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36' -O avd.swf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;反编译出AS脚本. 跟踪&lt;strong&gt;cookie&lt;/strong&gt;的传递以及上下文找到了&lt;strong&gt;playOverCallback&lt;/strong&gt;属性.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;text.htmlText = "&amp;lt;font color='#0a4055'&amp;gt;1&amp;lt;/font&amp;gt;秒后可跳过广告";
  text.y = 8;
  this.skipLayer.addChild(text);
  this.skipLayer.buttonMode = true;
  this.skipLayer.addEventListener(MouseEvent.CLICK, function (_arg1:MouseEvent):void{
    if (netStream.time &amp;lt; maxSkipBegin){
        return;
    };
    ExternalInterface.call(playOverCallback);
  });
  this.skipLayer.x = ((this.mediaLayer.width - this.skipLayer.width) - 60);
  this.skipLayer.y = ((this.mediaLayer.height - this.skipLayer.height) - 100);
  this.skipLayer.visible = false;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;发现这里调用了js的&lt;strong&gt;playOverCallback&lt;/strong&gt;变量, 跟踪到flvcd页面, 搜索&lt;strong&gt;playOverCallback&lt;/strong&gt;, 找到这么一串东西&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eval(function(p,a,c,k,e,r){e=function(c){return(c&amp;lt;a?'':e(parseInt(c/a)))+((c=c%a)&amp;gt;35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('2 E=Q;2 D=13;3 R(a,b){$("#f").k({m:X,n:K});r.J(\'f\');D={1b:[{18:a,17:b}],10:"N"};y()}3 y(){I(!E){4.c(y,W);l}2 a=O("F");V{a.T(D);a.H()}S(e){q(\'2 g = s(u, d);2 1 = h i();1.x(1.j()+z*5);6.9="C="+g+";8="+1.7();6.9="B="+d+";8="+1.7();4.c(3(){4.A.p();}, o);\');l}}3 N(){r.U();$("#f").k({G:"M",m:0,n:0});q(\'2 g = s(u, d);2 1 = h i();1.x(1.j()+z*5);6.9="C="+g+";8="+1.7();6.9="B="+d+";8="+1.7();4.c(3(){4.A.p();}, o);\')}3 O(a){l Y.Z(a)}2 w=0;3 11(){$("#F").12();$("#P").k({G:"M"});$("#f").k({m:14,n:K,15:"16"});r.J(\'f\');w=h i().j()/5;4.c(v,5)}3 v(){2 e=h i().j()/5;2 t=19.1a(e-w);I(t&amp;gt;L){q(\'2 g = s(u, d);2 1 = h i();1.x(1.j()+z*5);6.9="C="+g+";8="+1.7();6.9="B="+d+";8="+1.7();4.c(3(){4.A.p();}, o);\');l}$("#1c").1d((L-t)+"秒后开始解析");4.c(v,5)}H=1e=3(){1f("请关闭1g后再解析！")};',62,79,'|date|var|function|window|1000|document|toGMTString|expires|cookie|||setTimeout|XSSUhH||unLEPZ||new|Date|getTime|css|return|width|height|500|reload|eval|TSPopup|createSc||ygOoKv|doErrorPlay|errorStart|setTime|OPWSAY|300|location|avdGggggtt|go|config|avdOk|MnsWrL|display|doPlay|if|showDiv|540|20|block|ZHKxVp|thisMovie|nLXuim|false|avdPlay|catch|setup|closeDiv|try|100|960|swfobject|getObjectById|playOverCallback|dIXpcN|remove|null|700|overflowY|auto|clickthrough|url|Math|floor|ads|adtime|html|gogogo|alert|ADSafe'.split('|'),0,{}));ygOoKv='604f4848335c07ef64d76dc9df098b4a';XSSUhH=1450708902276;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;好吧. 使用了js混淆和压缩. 解开它 在看看是个什么鬼&lt;/p&gt;
&lt;p&gt;```
  function avdPlay(a, b) {
  $("#unLEPZ").css({
        width: 960,
                height: 540&lt;/p&gt;
&lt;p&gt;});
    TSPopup.showDiv('unLEPZ');
    config = {
    ads: [{
                url: a,
                            clickthrough: b&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;}],
        playOverCallback: &amp;quot;ZHKxVp&amp;quot;

};
    OPWSAY()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
  function OPWSAY() {
  if (!avdOk) {
        window.setTimeout(OPWSAY, 100);
                return&lt;/p&gt;
&lt;p&gt;}
    var a = thisMovie("MnsWrL");
    try {
            a.setup(config);
                    a.doPlay()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;var g = createSc(ygOoKv, XSSUhH);var date = new Date();date.setTime(date.getTime()+300*1000);document.cookie=&amp;quot;go=&amp;quot;+g+&amp;quot;;expires=&amp;quot;+date.toGMTString();document.cookie=&amp;quot;avdGggggtt=&amp;quot;+XSSUhH+&amp;quot;;expires=&amp;quot;+date.toGMTString();window.setTimeout(function(){window.location.reload();}, 500);&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                                &lt;span class="k"&gt;return&lt;/span&gt;

                &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
  ```&lt;/p&gt;
&lt;p&gt;看到这里, 就找到了 &lt;code&gt;go&lt;/code&gt;参数的加密算法在&lt;strong&gt;createSc&lt;/strong&gt;函数中, 于是我用这个作为关键字在flvcd的页面上搜索. 又找到了一段混淆和加密过的js. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;eval(function(p,a,c,k,e,r){e=function(c){return c.toString(a)};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('h n(d,c){c=j.k(c/m);4="";i(7 b=0;b&amp;lt;d.l;b++){7 a=d.6(b)^"g".6(b)^c,a=a%3,a=5&amp;gt;a?1.2(5+a%9):5&amp;lt;=a&amp;amp;&amp;amp;8&amp;gt;=a?1.2(a):8&amp;lt;a&amp;amp;&amp;amp;e&amp;gt;a?"9":e&amp;lt;=a&amp;amp;&amp;amp;f&amp;gt;=a?1.2(a):f&amp;lt;a&amp;amp;&amp;amp;o&amp;gt;a?"p":3&amp;lt;=a&amp;amp;&amp;amp;3&amp;gt;=a?1.2(a):"q";4+=a}r 4};',28,28,'|String|fromCharCode|122|ret|48|charCodeAt|var|57||||||65|90|26499035657058937199857879755120|function|for|Math|floor|length|6E5|createSc|97|Z|z|return'.split('|'),0,{}))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;照样解开, 得到我们可爱的&lt;strong&gt;createSc&lt;/strong&gt;函数, 一个非主流的凯撒密码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;function createSc(a, t) {
        var b = "26499035657058937199857879755120";
        t = Math.floor(t / (600 * 1000));
        ret = "";
        for (var i = 0; i &amp;lt; a.length; i++) {
            var j = a.charCodeAt(i) ^ b.charCodeAt(i) ^ t;
            j = j % 'z'.charCodeAt(0);
            var c;
            if (j &amp;lt; '0'.charCodeAt(0)) {
                c = String.fromCharCode('0'.charCodeAt(0) + j % 9)
            } else if (j &amp;gt;= '0'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt;= '9'.charCodeAt(0)) {
                c = String.fromCharCode(j)
            } else if (j &amp;gt; '9'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt; 'A'.charCodeAt(0)) {
                c = '9'
            } else if (j &amp;gt;= 'A'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt;= 'Z'.charCodeAt(0)) {
                c = String.fromCharCode(j)
            } else if (j &amp;gt; 'Z'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt; 'a'.charCodeAt(0)) {
                c = 'Z'
            } else if (j &amp;gt;= 'z'.charCodeAt(0) &amp;amp;&amp;amp; j &amp;lt;= 'z'.charCodeAt(0)) {
                c = String.fromCharCode(j)
            } else {
                c = 'z'
            }
            ret += c
        }
        return ret
    }&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;结尾&lt;/h1&gt;
&lt;p&gt;到此就已经结束了. cookie中的&lt;strong&gt;go&lt;/strong&gt;参数我们已经可以计算出来. 那么绕过他的广告限制. 我们又可以愉快的下载视频了.( :&amp;lt; 真不道德)&lt;/p&gt;</summary><category term="flvcd"></category><category term="youku"></category><category term="视频"></category><category term="破解"></category></entry><entry><title>Empathy快速关闭聊天窗口</title><link href="http://eleveni386.7axu.com/posts/2014/04/10/empathykuai-su-guan-bi-liao-tian-chuang-kou/" rel="alternate"></link><updated>2014-04-10T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2014-04-10:posts/2014/04/10/empathykuai-su-guan-bi-liao-tian-chuang-kou/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;只所以使用Empathy,而不是Pidgin, 是因为厌倦了单调的聊天窗口主题, 在Pidgin安装了新主题,每次
关闭聊天窗口,再次打开窗口时, 主题不存在了.但是Pidgin的插件真的很多, 用着很顺手,比如Esc快速
关闭聊天窗口.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;关闭会话窗口&lt;/h2&gt;
&lt;p&gt;Empathy 在默认情况下, 要关闭一个聊天会话 可以使用&lt;code&gt;Ctrl+W&lt;/code&gt;, 也可以使用鼠标点击&lt;code&gt;x&lt;/code&gt;, 但是这些&lt;/p&gt;
&lt;p&gt;操作方式都很变扭, 用习惯了Pidgin的&lt;code&gt;Esc&lt;/code&gt;,很难适应&lt;code&gt;Ctrl+W&lt;/code&gt;方式.&lt;/p&gt;
&lt;h2&gt;修改&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;被修改的文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/usr/share/empathy/empathy-chat-window.ui
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过搜索 &lt;strong&gt;gtk-close&lt;/strong&gt; 找到一下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;55           &lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GtkAction&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;menu_conv_close&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;                        
56             &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stock_id&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;gtk-close&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;                       
57             &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;menu_conv_close&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;                     
58           &lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;                                                              
59           &lt;span class="c"&gt;&amp;lt;!--&amp;lt;accelerator key=&amp;quot;W&amp;quot; modifiers=&amp;quot;GDK_CONTROL_MASK&amp;quot;/&amp;gt;--&amp;gt;&lt;/span&gt;             
60           &lt;span class="nt"&gt;&amp;lt;accelerator&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Escape&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;                                            
61         &lt;span class="nt"&gt;&amp;lt;/child&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注释掉 59行的内容,增加60行的内容进去&lt;/p&gt;
&lt;p&gt;保存,退出 ,重启Empathy&lt;/p&gt;
&lt;h2&gt;Hotkeys&lt;/h2&gt;
&lt;p&gt;使用Pidgin的大多数都知道这么一个插件, 能为Pidgin提供快捷键方式呼出聊天窗口, 类似企鹅的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ctrl+Alt+z&lt;/code&gt; 组合键&lt;/p&gt;
&lt;p&gt;恩, 对于我这一代的Linuxer而言, 都是从Windows 过来的, 自然也摆脱不了企鹅对我的影响, 在快捷键&lt;/p&gt;
&lt;p&gt;使用习惯上的, 于是我的Pidgin 快捷键也是&lt;code&gt;Ctrl+Alt+z&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;但是Empathy 是没有hotkeys插件的, 每次来了新消息 都要移动鼠标到Tray区域,很烦.... 于是,在&lt;/p&gt;
&lt;p&gt;群友&lt;a href="http://lilydjwg.is-programmer.com/"&gt;百合仙子&lt;/a&gt;的提示下, 自己写脚本来呼出聊天窗口.&lt;/p&gt;
&lt;h2&gt;快速唤出聊天窗口&lt;/h2&gt;
&lt;p&gt;脚本原理很简单. 根据Empathy的屏幕坐标, 模拟鼠标点击, 来唤出聊天窗口, 能玩Empathy的都是Linuxer了,&lt;/p&gt;
&lt;p&gt;咱的代码就不拿出来献丑了. 本来这个原理也懒得写出来的. 不过还是写出来,也能占个关键字嘛&lt;/p&gt;
&lt;p&gt;^.^ &lt;/p&gt;</summary><category term="聊天"></category><category term="Empathy"></category></entry><entry><title>tmux多panel同步</title><link href="http://eleveni386.7axu.com/posts/2013/08/23/tmuxduo-paneltong-bu/" rel="alternate"></link><updated>2013-08-23T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2013-08-23:posts/2013/08/23/tmuxduo-paneltong-bu/</id><summary type="html">&lt;p&gt;上一篇说过 我已经使用&lt;strong&gt;tmux&lt;/strong&gt; 代替&lt;strong&gt;SecureCRT&lt;/strong&gt;进行运维工作 , 
为此写了一个&lt;a href="https://github.com/eleveni386/clipm"&gt;密码管理工具&lt;/a&gt;,来配合&lt;strong&gt;tmux&lt;/strong&gt;使用,
经过两天的使用,感觉良好.&lt;strong&gt;KeepassX&lt;/strong&gt; 已经直接被我卸载了,今天要说的是&lt;strong&gt;SecureCRT&lt;/strong&gt;另外一个功能
&lt;strong&gt;批量执行命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用过&lt;strong&gt;SecureCRT&lt;/strong&gt;的孩纸,都知道它有一个很方便的功能,开启多个终端的时候,可以同时在这些终端输入命令,
极大的方便了我们的工作,我搬家到&lt;strong&gt;tmux&lt;/strong&gt; 也一直纠结这个功能.经过多次google之后 终于被我找到了.原来&lt;strong&gt;tmux&lt;/strong&gt;
也是有批量执行命令的, &lt;strong&gt;tmux panel sync&lt;/strong&gt;, &lt;strong&gt;panel同步&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://blog.sanctum.geek.nz/wp-content/uploads/2012/08/synchronize-panes.gif" /&gt;&lt;/p&gt;
&lt;p&gt;(PS:这里偷了别人的图,我懒得找gif制作工具)&lt;/p&gt;
&lt;p&gt;开启这个功能:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;:setw synchronize-panes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是一个开关,需要的时候键入, 不需要的时候键入同样的指令,即可关闭.&lt;/p&gt;
&lt;p&gt;友情提示:将它绑定到某一个快捷键上效果更佳哦 :-)&lt;/p&gt;
&lt;p&gt;btw, 我的tmux配置, 许多是参考网络上现有的.没太多个性化的东西.不过胜在实用&lt;/p&gt;
&lt;h2&gt;Base&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set -g default-terminal “screen-256color”
set -g display-time 3000
set -g history-limit 65535
set -g mouse-select-pane on
set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-window on
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Key bind&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;unbind C-b
set -g prefix C-l
bind C-l send-prefix

unbind ‘”‘
bind – splitw -v
unbind %
bind | splitw -h
bind c run “/usr/bin/python /home/eleven/Yunio/SystemBackup/tmux-shell/tmux-cpy.py”
bind r source-file ~/.tmux.conf \; display “Reloaded!”
bind s setw synchronize-panes

bind k selectp -U
bind j selectp -D
bind h selectp -L
bind l selectp -R
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;status bar&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set-option -g status-keys vi
set-option -g status-utf8 on
set-option -g status-interval 1
set-option -g status-justify “centre”
set-option -g status-left-length 60
set-option -g status-right-length 90
set-option -g status-left “#(/opt/data/soft/tmux-powerline/powerline.sh left)”
set-option -g status-right “#(/opt/data/soft/tmux-powerline/powerline.sh right)”
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Other&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;set-window-option -g mode-keys vi
set-window-option -g utf8 on
&lt;/pre&gt;&lt;/div&gt;</summary><category term="tmux"></category><category term="运维"></category></entry><entry><title>记一次安装fcitx过程</title><link href="http://eleveni386.7axu.com/posts/2013/03/11/ji-yi-ci-an-zhuang-fcitxguo-cheng/" rel="alternate"></link><updated>2013-03-11T00:00:00+08:00</updated><author><name>eleven.i386</name></author><id>tag:eleveni386.7axu.com,2013-03-11:posts/2013/03/11/ji-yi-ci-an-zhuang-fcitxguo-cheng/</id><summary type="html">&lt;p&gt;今天实在无法忍受&lt;em&gt;ibus&lt;/em&gt;的启动速度和词汇准确性了. 将ibus更换成&lt;strong&gt;fcitx&lt;/strong&gt;, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;apt-get install fcitx
im-switch -s fcitx
im-switch -s fcitx -z default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在&lt;em&gt;autostart&lt;/em&gt;中加入fcitx的自启动.. 注销X界面之后, 发现fcitx是启动起来了, 
只是应用程序的默认输入法还是&lt;em&gt;Ibus&lt;/em&gt;, 于是google之 ,找到了fcitx环境变量设置, 
在&lt;strong&gt;~/.xprofile&lt;/strong&gt; 中加入fcitx的环境变量:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;export GTK_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx
export QT_IM_MODULE=fcitx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注销X界面 再次进入系统,&lt;code&gt;echo $GTK_IM_MODULE&lt;/code&gt; 发现这个变量已经是fcitx, 但是应用
程序默认输入法还是&lt;strong&gt;Ibus&lt;/strong&gt; , 来来回回折腾了几次, 忍不住吐槽了下Ibus的无耻.. 
结果无意中dpkg -l |grep ibus 发现….:&lt;/p&gt;
&lt;p&gt;尼玛,为啥我系统里面还有ibus… 为啥我明明记得昨天已经将ibus给卸载了, 
… 唉, 咱这个记性哇 ,不过吐槽ibus的话咱还是不会收回的…. 
俗话不是说,该吐槽时就吐槽么… &lt;/p&gt;
&lt;p&gt;好了, 将ibus所有东西给卸载掉, 注销X界面 之后, 这个世界终于干净了!!!&lt;/p&gt;</summary><category term="fcitx"></category><category term="桌面"></category><category term="输入法"></category></entry></feed>